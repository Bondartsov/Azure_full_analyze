import os
from core.azure.connection import connect_to_azure
from core.logging.logger import log
from azure.devops.v7_0.git.models import GitRepository
from tqdm import tqdm  # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏

def get_repositories(project_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–ª—è–º–∏ .id –∏ .name.
    """
    try:
        connection = connect_to_azure()
        git_client = connection.clients.get_git_client()
        
        log(f"üìå –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_name}...")
        repos = git_client.get_repositories(project=project_name)

        if not repos:
            log(f"‚ö† –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_name}.", level="WARNING")
            return []

        repo_list = [repo for repo in repos if isinstance(repo, GitRepository)]
        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(repo_list)} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {[repo.name for repo in repo_list]}")
        return repo_list  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–º–µ–Ω–∞

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {str(e)}", level="ERROR")
        return []


def fetch_files_from_azure(project_name, repository_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API Azure DevOps.
    """
    try:
        connection = connect_to_azure()
        git_client = connection.clients.get_git_client()

        log(f"üìÇ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}...")
        items = git_client.get_items(project=project_name, repository_id=repository_name, recursion_level="full")

        if not items:
            log(f"‚ö† –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repository_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.", level="WARNING")
            return []

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤
        file_paths = [item.path for item in items if not item.is_folder]
        log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(file_paths)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {repository_name}")
        return file_paths

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ {repository_name}: {e}", level="ERROR")
        return []


def get_repo_files(project_name, repository_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è `fetch_files_from_azure`.
    """
    try:
        files = fetch_files_from_azure(project_name, repository_name)

        if not files:
            log(f"‚ö† DEBUG: –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ **{repository_name}** **–Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤**. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"   - üîπ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—É—Å—Ç\n"
                f"   - üîπ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤\n"
                f"   - üîπ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\n"
                f"   - üîπ –°–±–æ–π —Å–µ—Ç–∏/API", level="WARNING")
            return None

        return files

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ {repository_name}: {e}", level="ERROR")
        return None


def get_file_content(project_name, repository_name, file_path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ –µ–≥–æ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ API Azure DevOps.
    """
    try:
        connection = connect_to_azure()
        git_client = connection.clients.get_git_client()

        log(f"üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {file_path} –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}...")
        content_generator = git_client.get_item_content(repository_name, path=file_path, project=project_name)

        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        file_content = b"".join(content_generator).decode("utf-8", errors="ignore")

        if file_content:
            log(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω ({len(file_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            log(f"‚ö† –§–∞–π–ª {file_path} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å", level="WARNING")

        return file_content if file_content else ""

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}", level="ERROR")
        return ""
