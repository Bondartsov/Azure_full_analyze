# core/ai/code_advisor.py

from openai import OpenAI
from openai._exceptions import (
    OpenAIError,
    APIConnectionError,
    RateLimitError,
    APIStatusError
)
import os
from dotenv import load_dotenv
from core.logging.logger import log

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv(r"D:\Projects\Azure_full_analyze\.env")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "o3-mini")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI(
    api_key=OPENAI_API_KEY
)

def query_openai(prompt):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–∞–ª–∏–∑.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã temperature –∏ max_tokens —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å "o3-mini" –∏—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç.
    """
    if not OPENAI_API_KEY:
        log("‚ö†Ô∏è API-–∫–ª—é—á OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", level="ERROR")
        raise ValueError("‚ö†Ô∏è API-–∫–ª—é—á OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    print(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI: {prompt[:50]}...")
    log(f"üìù –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")

    try:
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": prompt}],
            timeout=30  # –¢–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            # temperature –∏ max_tokens —É–¥–∞–ª–µ–Ω—ã
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log(f"üì° –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: {response.model_dump()}")

        choices = response.choices  # –î–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –≤—ã–±–æ—Ä–æ–∫
        if not choices:
            log("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±–æ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç OpenAI.", level="WARNING")
            return ""

        message = choices[0].message  # –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
        if not hasattr(message, 'content'):
            log("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.", level="WARNING")
            return ""

        analysis = message.content.strip()
        if not analysis:
            log("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI.", level="WARNING")
        else:
            log("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI.")

        return analysis

    except APIConnectionError as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI: {e}", level="ERROR")
        return ""

    except RateLimitError as e:
        log(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI: {e}", level="ERROR")
        return ""

    except APIStatusError as e:
        log(f"‚ùå API –æ—à–∏–±–∫–∞ –æ—Ç OpenAI: –°—Ç–∞—Ç—É—Å {e.status_code}, –°–æ–æ–±—â–µ–Ω–∏–µ: {e.message}", level="ERROR")
        return ""

    except OpenAIError as e:
        log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ OpenAI: {e}", level="ERROR")
        return ""

    except Exception as e:
        log(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}", level="ERROR")
        return ""