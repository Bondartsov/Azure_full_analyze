import os
from datetime import datetime
from core.ai.code_advisor import query_openai
from core.utils.token_counter import count_tokens_in_text
from core.logging.logger import log

REPORTS_DIR = "ai_reports"

def generate_ai_report(project_name, repository_name, folder_name, file_name, file_content):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ò–ò-–æ—Ç—á—ë—Ç –ø–æ –∫–æ–¥—É —Ñ–∞–π–ª–∞.
    """
    lines = file_content.split("\n")
    num_lines = len(lines)
    num_comments = sum(1 for line in lines if line.strip().startswith("#") or line.strip().startswith("//"))
    num_tokens = count_tokens_in_text(file_content)
    
    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
    
    {file_content.encode("utf-8").decode("utf-8")}
    
    1. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –∏–º–ø–æ—Ä—Ç—ã).
    2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥.
    3. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.
    4. –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω —ç—Ç–æ—Ç –∫–æ–¥ (1-10)?
    """.strip()
    
    analysis = query_openai(prompt)
    
    project_path = os.path.join(REPORTS_DIR, project_name, repository_name, folder_name)
    os.makedirs(project_path, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    report_filename = f"ai_report_{project_name}_{repository_name}_{folder_name}_{file_name}_{timestamp}.txt"
    report_path = os.path.join(project_path, report_filename)
    
    with open(report_path, "w", encoding="utf-8") as f:
        f.write(f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n")
        f.write(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repository_name}\n")
        f.write(f"–ü–∞–ø–∫–∞: {folder_name}\n")
        f.write(f"–§–∞–π–ª: {file_name}\n")
        f.write(f"–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {num_lines}\n")
        f.write(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {num_comments}\n")
        f.write(f"–¢–æ–∫–µ–Ω–æ–≤: {num_tokens}\n\n")
        f.write("üìå **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**\n")
        f.write(analysis)
    
    print(f"DEBUG: –û—Ç—á—ë—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏: {report_path}", flush=True)
    return os.path.abspath(report_path)
def generate_deep_report_for_repo(project_name, repository_name, files_data):
    """
    –î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ò–ò‚Äë–æ—Ç—á—ë—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    –°–æ–±–∏—Ä–∞–µ—Ç –ø—É—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç.
    –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤.
    –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ—Ç—á—ë—Ç—É.
    """
    deep_report_paths = []
    for file_info in files_data:
        file_name = file_info.get("file_name") or file_info.get("path")
        folder = file_info.get("folder", "root")
        file_content = file_info.get("content")
        if not file_content:
            continue
        try:
            report_path = generate_ai_report(project_name, repository_name, folder, file_name, file_content)
            deep_report_paths.append(report_path)
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}: {e}", level="ERROR")
    
    aggregated_dir = os.path.join(REPORTS_DIR, project_name, repository_name)
    os.makedirs(aggregated_dir, exist_ok=True)
    aggregated_report_path = os.path.join(aggregated_dir, "aggregated_deep_report.txt")
    try:
        with open(aggregated_report_path, "w", encoding="utf-8") as f:
            header = f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò‚Äë–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}\n\n"
            f.write(header)
            if deep_report_paths:
                for path in deep_report_paths:
                    f.write(f"{path}\n")
            else:
                message = (
                    "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env (WHITE_EXTENSIONS) –∏ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.\n"
                )
                f.write(message)
                print(message, flush=True)
        print(header, flush=True)
        with open(aggregated_report_path, "r", encoding="utf-8") as f:
            print(f.read(), flush=True)
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞: {e}", level="ERROR")
    return os.path.abspath(aggregated_report_path)
def get_deep_reports_for_repo(project_name, repository_name, files_data):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    deep_reports = []
    for file_info in files_data:
        file_name = file_info.get("file_name") or file_info.get("path")
        folder = file_info.get("folder", "root")
        file_content = file_info.get("content")
        if not file_content:
            continue
        try:
            report_path = generate_ai_report(project_name, repository_name, folder, file_name, file_content)
            deep_reports.append(os.path.abspath(report_path))
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}: {e}", level="ERROR")
    return deep_reports