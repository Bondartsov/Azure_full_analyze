# core/ai/report_generator.py

import os
from datetime import datetime
from core.ai.code_advisor import query_openai
from core.utils.token_counter import count_tokens_in_text, split_text
from core.logging.logger import log

REPORTS_DIR = "ai_reports"

def generate_ai_report(project_name, repository_name, folder_name, file_name, file_content):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ò–ò-–æ—Ç—á—ë—Ç –ø–æ –∫–æ–¥—É —Ñ–∞–π–ª–∞.
    """
    lines = file_content.split("\n")
    num_lines = len(lines)
    num_comments = sum(1 for line in lines if line.strip().startswith("#") or line.strip().startswith("//"))
    num_tokens = count_tokens_in_text(file_content)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cl100k_base –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    parts = split_text(file_content, max_tokens=3000)  # model –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'cl100k_base'
    analyses = []
    
    for idx, part in enumerate(parts, 1):
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:
        
        {part}
        
        1. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –∏–º–ø–æ—Ä—Ç—ã).
        2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥.
        3. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.
        4. –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω —ç—Ç–æ—Ç –∫–æ–¥ (1-10)?
        """.strip()

        log(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI –¥–ª—è {file_name} (—á–∞—Å—Ç—å {idx})")

        analysis = query_openai(prompt)
        
        if analysis:
            analyses.append(analysis)
            log(f"üìÑ –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –¥–ª—è —á–∞—Å—Ç–∏ {idx} —Ñ–∞–π–ª–∞ {file_name}")
        else:
            analyses.append("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI.")
            log(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –¥–ª—è —á–∞—Å—Ç–∏ {idx} —Ñ–∞–π–ª–∞ {file_name} –ø—É—Å—Ç.", level="WARNING")
    
    aggregated_analysis = "\n\n---\n\n".join(analyses)
    
    project_path = os.path.join(REPORTS_DIR, project_name, repository_name, folder_name)
    os.makedirs(project_path, exist_ok=True)
    
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    report_filename = f"ai_report_{file_name}_{timestamp}.txt"
    report_path = os.path.join(project_path, report_filename)

    log(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞: {report_path}")

    try:
        with open(report_path, "w", encoding="utf-8") as f:
            f.write(f"–ü—Ä–æ–µ–∫—Ç: {project_name}\n")
            f.write(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repository_name}\n")
            f.write(f"–ü–∞–ø–∫–∞: {folder_name}\n")
            f.write(f"–§–∞–π–ª: {file_name}\n")
            f.write(f"–°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {num_lines}\n")
            f.write(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {num_comments}\n")
            f.write(f"–¢–æ–∫–µ–Ω–æ–≤: {num_tokens}\n\n")
            f.write("üìå **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**\n")
            f.write(aggregated_analysis)
        
        log(f"‚úÖ –û—Ç—á—ë—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {report_path}")

        if not os.path.exists(report_path):
            log(f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—á—ë—Ç {report_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!", level="ERROR")

        return os.path.abspath(report_path)

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}: {e}", level="ERROR")
        return None

def generate_deep_report_for_repo(project_name, repository_name, files_data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ò–ò-–æ—Ç—á—ë—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç.
    """
    log(f"üîç –ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–≥–æ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")

    deep_report_paths = []
    
    for file_info in files_data:
        file_name = file_info.get("file_name") or file_info.get("path")
        folder = file_info.get("folder", "root")
        file_content = file_info.get("content")

        if not file_content:
            log(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –ø—Ä–æ–ø—É—â–µ–Ω: –ø—É—Å—Ç–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.")
            continue
        
        log(f"üìÅ –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_name}")

        try:
            # üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
            log(f"üöÄ –í—ã–∑–æ–≤ generate_ai_report –¥–ª—è —Ñ–∞–π–ª–∞: {file_name} (–ø–∞–ø–∫–∞: {folder})")
            report_path = generate_ai_report(project_name, repository_name, folder, file_name, file_content)

            if report_path:
                deep_report_paths.append(report_path)
                log(f"‚úÖ –§–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
            else:
                log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}!", level="ERROR")

        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}: {e}", level="ERROR")
    
    aggregated_dir = os.path.join(REPORTS_DIR, project_name, repository_name)
    os.makedirs(aggregated_dir, exist_ok=True)
    aggregated_report_path = os.path.join(aggregated_dir, "aggregated_deep_report.txt")

    log(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {aggregated_report_path}")

    try:
        with open(aggregated_report_path, "w", encoding="utf-8") as f:
            header = f"–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repository_name}\n\n"
            f.write(header)
            if deep_report_paths:
                for path in deep_report_paths:
                    f.write(f"{path}\n")
            else:
                message = "‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!"
                f.write(message)
        log(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç: {aggregated_report_path}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ò–ò‚Äë–æ—Ç—á—ë—Ç–∞: {e}", level="ERROR")
    
    return os.path.abspath(aggregated_report_path)

def get_deep_reports_for_repo(project_name, repository_name, files_data):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ò–ò-–æ—Ç—á—ë—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    deep_reports = []
    for file_info in files_data:
        file_name = file_info.get("file_name") or file_info.get("path")
        folder = file_info.get("folder", "root")
        file_content = file_info.get("content")

        if not file_content:
            log(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {file_name}")
            continue

        try:
            report_path = generate_ai_report(project_name, repository_name, folder, file_name, file_content)
            if report_path:
                deep_reports.append(os.path.abspath(report_path))
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–æ—Ç—á—ë—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞ {file_name}: {e}", level="ERROR")

    return deep_reports