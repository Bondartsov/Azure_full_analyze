# core/utils/database.py

import sqlite3
from sqlite3 import Error
from core.logging.logger import log
import os
from datetime import datetime, timezone
import time

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å
DB_PATH = os.getenv("FILES_DB_PATH", os.path.join(os.path.dirname(__file__), "../../files.db"))

def create_connection(db_file):
    """–°–æ–∑–¥–∞—ë—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SQLite –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç WAL —Ä–µ–∂–∏–º."""
    conn = None
    try:
        conn = sqlite3.connect(db_file, timeout=30)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
        log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {db_file} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º
        cursor = conn.cursor()
        cursor.execute("PRAGMA journal_mode=WAL;")
        cursor.close()
    except Error as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {db_file}: {e}", level="ERROR")
    return conn

def create_table():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É analysis_results, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = create_connection(DB_PATH)
    if conn is None:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.", level="ERROR")
        return False

    try:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS analysis_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_name TEXT,
                repository_name TEXT,
                folder_name TEXT,
                file_name TEXT,
                file_path TEXT UNIQUE,
                content TEXT,
                lines INTEGER,
                comments INTEGER,
                tokens INTEGER,
                hash TEXT,
                processed BOOLEAN,
                analysis TEXT,
                date_created TEXT,
                date_updated TEXT
            );
        """)
        conn.commit()
        log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ analysis_results —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return True
    except Error as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã analysis_results: {e}", level="ERROR")
        return False
    finally:
        conn.close()


def add_file_record(project_name, repository_name, folder_name, file_name, file_path, content, lines, comments, tokens, hash_value, processed=False):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –≤ —Ç–∞–±–ª–∏—Ü—É analysis_results —Å —Ä–µ—Ç—Ä–∞–∏ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    :param repository_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    :param folder_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏.
    :param file_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
    :param file_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    :param content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
    :param lines: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞.
    :param comments: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    :param tokens: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.
    :param hash_value: –•–µ—à-—Å—É–º–º–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    :param processed: –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False).
    :return: True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    max_retries = 5
    retry_delay = 0.5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    for attempt in range(1, max_retries + 1):
        conn = create_connection(DB_PATH)
        if conn is None:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.", level="ERROR")
            return False

        try:
            cursor = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–µ–º –∂–µ file_path –∏ hash_value
            cursor.execute("""
                SELECT id, processed FROM analysis_results 
                WHERE file_path = ? AND hash = ?
            """, (file_path, hash_value))
            result = cursor.fetchone()

            if result:
                # –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                log(f"üîç –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                file_id, is_processed = result
                if is_processed:
                    log(f"‚úÖ –§–∞–π–ª {file_path} —É–∂–µ –±—ã–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
                    return True  # –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    current_time = datetime.now(timezone.utc).isoformat()
                    cursor.execute("""
                        UPDATE analysis_results
                        SET content = ?, lines = ?, comments = ?, tokens = ?, hash = ?, date_updated = ?
                        WHERE id = ?
                    """, (content, lines, comments, tokens, hash_value, current_time, file_id))
                    conn.commit()
                    log(f"üîÑ –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                    return True
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
                current_time = datetime.now(timezone.utc).isoformat()
                cursor.execute("""
                    INSERT INTO analysis_results (
                        project_name, repository_name, folder_name, file_name, file_path, content, lines, comments, tokens, hash, processed, date_created, date_updated
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (project_name, repository_name, folder_name, file_name, file_path, content, lines, comments, tokens, hash_value, processed, current_time, current_time))
                conn.commit()
                log(f"‚ûï –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
                return True

        except sqlite3.OperationalError as e:
            if 'database is locked' in str(e).lower():
                log(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫.")
                time.sleep(retry_delay)
                retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
            else:
                log(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}: {e}", level="ERROR")
                return False
        except Error as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}: {e}", level="ERROR")
            return False
        finally:
            conn.close()

    log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª {file_path} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.", level="ERROR")
    return False

def get_unprocessed_files():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ò–ò.
    
    :return: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –æ —Ñ–∞–π–ª–∞—Ö.
    """
    conn = create_connection(DB_PATH)
    if conn is None:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤.", level="ERROR")
        return []

    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, project_name, repository_name, folder_name, file_name, file_path, content, lines, comments, tokens, hash
            FROM analysis_results
            WHERE processed = FALSE
        """)
        rows = cursor.fetchall()
        files = []
        for row in rows:
            files.append({
                "id": row[0],
                "project_name": row[1],
                "repository_name": row[2],
                "folder_name": row[3],
                "file_name": row[4],
                "file_path": row[5],
                "content": row[6],
                "lines": row[7],
                "comments": row[8],
                "tokens": row[9],
                "hash": row[10]
            })
        log(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(files)} –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return files
    except Error as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}", level="ERROR")
        return []
    finally:
        conn.close()

def update_file_record(file_id, analysis):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ò–ò.
    
    :param file_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ò–ò.
    :return: True, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    max_retries = 5
    retry_delay = 0.5  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    for attempt in range(1, max_retries + 1):
        conn = create_connection(DB_PATH)
        if conn is None:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.", level="ERROR")
            return False

        try:
            cursor = conn.cursor()
            current_time = datetime.now(timezone.utc).isoformat()
            log(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {file_id} —Å –∞–Ω–∞–ª–∏–∑–æ–º: {analysis}")
            cursor.execute("""
                UPDATE analysis_results
                SET processed = TRUE, analysis = ?, date_updated = ?
                WHERE id = ?
            """, (analysis, current_time, file_id))
            conn.commit()
            changes = cursor.rowcount
            log(f"üìà –ò–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {changes}")
            if changes == 0:
                log(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å id {file_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", level="WARNING")
            else:
                log(f"‚úÖ –ó–∞–ø–∏—Å—å {file_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: processed=True, analysis set.")
            return changes > 0

        except sqlite3.OperationalError as e:
            if 'database is locked' in str(e).lower():
                log(f"‚ö† –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫.")
                time.sleep(retry_delay)
                retry_delay *= 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                continue  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞
            else:
                log(f"‚ùå –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {file_id}: {e}", level="ERROR")
                return False
        except Error as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ {file_id}: {e}", level="ERROR")
            return False
        finally:
            conn.close()

    log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å {file_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.", level="ERROR")
    return False

def delete_file_record(file_path, hash_value):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã analysis_results.
    
    :param file_path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    :param hash_value: –•–µ—à-—Å—É–º–º–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    :return: True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False.
    """
    conn = create_connection(DB_PATH)
    if conn is None:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.", level="ERROR")
        return False

    try:
        cursor = conn.cursor()
        cursor.execute("""
            DELETE FROM analysis_results
            WHERE file_path = ? AND hash = ?
        """, (file_path, hash_value))
        conn.commit()
        if cursor.rowcount > 0:
            log(f"üóëÔ∏è –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} —É–¥–∞–ª–µ–Ω–∞.")
            return True
        else:
            log(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", level="WARNING")
            return False
    except Error as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path}: {e}", level="ERROR")
        return False
    finally:
        conn.close()