import json
import os
from core.logging.logger import log

CACHE_DIR = "cache"

def get_cache_path(project_name, repository_name=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞.
    –ï—Å–ª–∏ repository_name –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–¥–Ω—ã–π –∫—ç—à –ø–æ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É.
    """
    os.makedirs(CACHE_DIR, exist_ok=True)
    if repository_name:
        return os.path.join(CACHE_DIR, f"{project_name}_{repository_name}.json")
    return os.path.join(CACHE_DIR, f"{project_name}_summary.json")

def load_cache(project_name, repository_name=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (json)."""
    cache_file = get_cache_path(project_name, repository_name)
    if not os.path.exists(cache_file):
        return None
    try:
        with open(cache_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ {cache_file}: {e}", level="ERROR")
        return None

def save_cache(data, project_name, repository_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à (json)."""
    cache_file = get_cache_path(project_name, repository_name)
    try:
        with open(cache_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        log(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {cache_file}")
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ {cache_file}: {e}", level="ERROR")

def is_repo_changed(project_name, repository_name, latest_commit=None):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –≥–ª—è–¥—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–∞–π–ª—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä latest_commit –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    –ï—Å–ª–∏ –≤ –∫—ç—à–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ —É –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å "hash",
    –º—ã —Å–≤–µ—Ä—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—É—â–∏–º —Ö–µ—à–µ–º.
    –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ —Å–æ–≤–ø–∞–ª ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è.

    –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–µ–ø–æ –Ω–æ–≤–æ–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
    """
    cached_data = load_cache(project_name, repository_name)
    if not cached_data:
        # –ù–µ—Ç –∫—ç—à–∞, –∑–Ω–∞—á–∏—Ç –Ω–æ–≤—ã–π –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω
        return True

    cached_files = cached_data.get("files", [])
    for file_info in cached_files:
        if "path" not in file_info or "hash" not in file_info:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏ –∏–ª–∏ —Ö–µ—à–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
            return True

        current_hash = get_file_hash(file_info["path"])
        if file_info["hash"] != current_hash:
            return True

    return False

def save_repo_data_to_cache(project_name, repository_name, total_tokens, files_data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –∫—ç—à.
    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    :param repository_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    :param total_tokens: –û–±—â–µ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤
    :param files_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞ [{"path": "...", "tokens": N}, ...]
                       –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç "hash": —Ö–µ—à_—Ñ–∞–π–ª–∞,
                       —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å is_repo_changed.
    """
    data = {
        "total_tokens": total_tokens,
        "files": files_data
    }
    # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º, –º–æ–∂–µ–º —Ç—É—Ç –∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ "hash" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    # –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:
    for f in data["files"]:
        if "path" in f:
            f["hash"] = get_file_hash(f["path"])

    save_cache(data, project_name, repository_name)

def load_repo_data_from_cache(project_name, repository_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –∫—ç—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "total_tokens" –∏ "files",
    –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
    """
    cached_data = load_cache(project_name, repository_name)
    if not cached_data:
        return None
    return cached_data

def get_file_hash(file_path):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    NB: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –∑–Ω–∞–µ—Ç –æ project_name/repository_name,
        –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
    """
    from hashlib import sha256
    try:
        with open(file_path, "rb") as f:
            return sha256(f.read()).hexdigest()
    except Exception:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è
        return None

def clear_cache_for_repo(project_name, repository_name):
    """–£–¥–∞–ª—è–µ—Ç –∫—ç—à –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    cache_file = get_cache_path(project_name, repository_name)
    if os.path.exists(cache_file):
        os.remove(cache_file)
        log(f"üóëÔ∏è –ö—ç—à —É–¥–∞–ª—ë–Ω –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")

def clear_project_summary_cache(project_name):
    """–£–¥–∞–ª—è–µ—Ç —Å–≤–æ–¥–Ω—ã–π –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞."""
    cache_file = get_cache_path(project_name)
    if os.path.exists(cache_file):
        os.remove(cache_file)
        log(f"üóëÔ∏è –ö—ç—à —É–¥–∞–ª—ë–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
