import json
import os
from core.logging.logger import log

CACHE_DIR = "cache"

def get_cache_path(project_name, repository_name=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞."""
    os.makedirs(CACHE_DIR, exist_ok=True)  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if repository_name:
        return os.path.join(CACHE_DIR, f"{project_name}_{repository_name}.json")
    return os.path.join(CACHE_DIR, f"{project_name}_summary.json")

def load_cache(project_name, repository_name=None):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞."""
    cache_file = get_cache_path(project_name, repository_name)
    if not os.path.exists(cache_file):
        return None

    try:
        with open(cache_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ {cache_file}: {e}", level="ERROR")
        return None

def save_cache(data, project_name, repository_name=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à."""
    cache_file = get_cache_path(project_name, repository_name)

    try:
        with open(cache_file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        log(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {cache_file}")
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ {cache_file}: {e}", level="ERROR")

def is_repo_changed(project_name, repository_name, latest_commit):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∫–æ–º–º–∏—Ç—É –∏–ª–∏ —Ñ–∞–π–ª–∞–º.
    –í–ê–ñ–ù–û: –°–µ–π—á–∞—Å last_commit –≤ –∫—ç—à–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è commit_count, –∞ –Ω–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ö–µ—à!
           –ü–æ—ç—Ç–æ–º—É —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ cached_data.get("last_commit") != latest_commit
           (–≥–¥–µ latest_commit - —Å—Ç—Ä–æ–∫–∞-—Ö–µ—à) –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç True.
    """
    cached_data = load_cache(project_name, repository_name)

    if not cached_data:
        return True  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–Ω–∞—á–∏—Ç, —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–æ–≤—ã–π

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ "last_commit" –∏ latest_commit –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,
    # —Ç–∞–∫ –∫–∞–∫ –≤ "last_commit" —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª–µ–∂–∏—Ç —á–∏—Å–ª–æ –∫–æ–º–º–∏—Ç–æ–≤ (commit_count).
    if cached_data.get("last_commit") != latest_commit:
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ñ–∞–π–ª–∞–º
    cached_files = cached_data.get("files", [])
    for file in cached_files:
        if "path" in file and "hash" in file:
            if file["hash"] != get_file_hash(project_name, repository_name, file["path"]):
                return True  # –§–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è

    return False  # –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

def save_repo_data_to_cache(project_name, repository_name, total_tokens, commit_count, files_data, analysis):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –∫—ç—à.

    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    :param repository_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    :param total_tokens: –û–±—â–µ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤
    :param commit_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤ (–Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ last_commit!)
    :param files_data: –°–ø–∏—Å–æ–∫ (–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å) –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–π–ª–∞–º
    :param analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (dict)
    """
    # last_commit —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ–º commit_count. 
    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ö–µ—à, –ø–µ—Ä–µ–¥–∞–≤–∞–π –µ–≥–æ —Å—é–¥–∞ –≤–º–µ—Å—Ç–æ commit_count.
    data = {
        "last_commit": commit_count,  # –í–ù–ò–ú–ê–ù–ò–ï: –∑–¥–µ—Å—å commit_count –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
        "total_tokens": total_tokens,
        "commit_count": commit_count,
        "files": files_data,
        "analysis": analysis
    }
    save_cache(data, project_name, repository_name)

def load_repo_data_from_cache(project_name, repository_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ –∫—ç—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    (total_tokens, commit_count, files_data, analysis) –∏–ª–∏ None, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç.
    """
    cached_data = load_cache(project_name, repository_name)
    if not cached_data:
        return None

    total_tokens = cached_data.get("total_tokens", 0)
    commit_count = cached_data.get("commit_count", 0)
    files_data = cached_data.get("files", [])
    analysis = cached_data.get("analysis", {})

    return total_tokens, commit_count, files_data, analysis

def get_file_hash(project_name, repository_name, file_path):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    from hashlib import sha256
    try:
        with open(file_path, "rb") as f:
            return sha256(f.read()).hexdigest()
    except Exception:
        return None  # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

def clear_cache_for_repo(project_name, repository_name):
    """–£–¥–∞–ª—è–µ—Ç –∫—ç—à –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    cache_file = get_cache_path(project_name, repository_name)
    if os.path.exists(cache_file):
        os.remove(cache_file)
        log(f"üóëÔ∏è –ö—ç—à —É–¥–∞–ª—ë–Ω –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")

def clear_project_summary_cache(project_name):
    """–£–¥–∞–ª—è–µ—Ç —Å–≤–æ–¥–Ω—ã–π –∫—ç—à –ø—Ä–æ–µ–∫—Ç–∞."""
    cache_file = get_cache_path(project_name)
    if os.path.exists(cache_file):
        os.remove(cache_file)
        log(f"üóëÔ∏è –ö—ç—à —É–¥–∞–ª—ë–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
