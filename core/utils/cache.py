import json
import os
from core.logging.logger import log

CACHE_FILE = "./cache.json"


def load_cache():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                cache = json.load(f)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∞, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å–ª–æ–≤–∞—Ä—å)
            for key, value in cache.items():
                if isinstance(value, str):
                    cache[key] = {"last_commit": value, "tokens": 0, "commits": 0}

            return cache

        except json.JSONDecodeError:
            log("‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∫—ç—à–∞. –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.", level="ERROR")
        except Exception as e:
            log(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}", level="ERROR")

    return {}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –∫—ç—à, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞


def save_cache(cache):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –∫—ç—à–∞."""
    try:
        with open(CACHE_FILE, "w", encoding="utf-8") as f:
            json.dump(cache, f, indent=4, ensure_ascii=False)
    except Exception as e:
        log(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}", level="ERROR")


def is_repo_changed(project_name, repository_name, latest_commit):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ö—ç—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞.
    –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ù–ï –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.
    """
    cache = load_cache()
    key = f"{project_name}/{repository_name}"

    if key in cache and cache[key].get("last_commit") == latest_commit:
        log(f"üîÑ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repository_name} –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞.")
        return False  # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    cache[key] = {"last_commit": latest_commit, "tokens": 0, "commits": 0}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    save_cache(cache)
    return True  # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è


def save_repo_data_to_cache(project_name, repository_name, total_tokens, commit_count):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –∫—ç—à."""
    cache = load_cache()
    key = f"{project_name}/{repository_name}"

    if key not in cache:
        cache[key] = {}

    cache[key]["tokens"] = total_tokens
    cache[key]["commits"] = commit_count

    save_cache(cache)


def load_repo_data_from_cache(project_name, repository_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å."""
    cache = load_cache()
    key = f"{project_name}/{repository_name}"

    if key in cache:
        return cache[key].get("tokens", 0), cache[key].get("commits", 0)

    return None  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


def load_all_project_data_from_cache(project_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∫—ç—à–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏-–æ—Ç—á—ë—Ç–∞.
    """
    cache = load_cache()
    project_data = {}

    for key, data in cache.items():
        if key.startswith(f"{project_name}/"):
            repo_name = key.split("/")[-1]
            project_data[repo_name] = {
                "tokens": data.get("tokens", 0),
                "commits": data.get("commits", 0)
            }

    return project_data
