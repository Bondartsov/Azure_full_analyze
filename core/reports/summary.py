import os
from core.logging.logger import log
from datetime import datetime

def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (1000000 -> 1 000 000)"""
    return f"{number:,}".replace(",", " ")

def generate_summary(project_name, repository_results):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞"""
    if not repository_results:
        log(f"‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É {project_name}.", level="WARNING")
        return None

    summary_dir = "reports"
    os.makedirs(summary_dir, exist_ok=True)

    date_str = datetime.now().strftime("%Y-%m-%d_%H-%M")
    summary_filename = f"summary_{project_name}_{date_str}.txt"
    summary_path = os.path.join(summary_dir, summary_filename)

    total_tokens = sum(repo["tokens"] for repo in repository_results)

    with open(summary_path, "w", encoding="utf-8") as f:
        f.write(f"üìå –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {project_name}\n")
        f.write(f"üìÖ –î–∞—Ç–∞: {date_str}\n\n")
        f.write("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n")

        for idx, repo in enumerate(repository_results, start=1):
            f.write(f"{idx}. {repo['repository']} ‚Äî {format_number(repo['tokens'])} —Ç–æ–∫–µ–Ω–æ–≤\n")

        f.write("\nüìä –ò—Ç–æ–≥:\n")
        f.write(f"üí° –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {format_number(total_tokens)}\n")

    log(f"‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {summary_path}")
    return summary_path
