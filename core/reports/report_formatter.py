import os
import json  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

def format_repository_report(project_name, repository_name, files_data):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    :param repository_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
    :param files_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π. –ö–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç:
        {
          "path": "/src/OLAP/DimensionFilters/DimensionFilters.Tests/TestData/CurrentDayTestCases.cs",
          "tokens": 231,
          "lines": 0,
          "comments": 0,
          "role": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å",
          ...
        }
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ (str).
    """
    report_lines = [
        f"üìÇ –û—Ç—á—ë—Ç –æ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}",
        "=" * 100,
        f"üìå –ü—Ä–æ–µ–∫—Ç: {project_name}",
        f"üìå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repository_name}",
        "=" * 100,
        "\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:\n"
    ]

    # –ï—Å–ª–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞,
    # –Ω–µ –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É, –∞ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º "–∏—Ç–æ–≥" —Å –Ω—É–ª—è–º–∏.
    if not files_data:
        report_lines.append("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ª–∏–±–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∏—Å–∫–ª—é—á–µ–Ω—ã).")
        report_lines.append("=" * 100)
        report_lines.append(f"üìä –ò—Ç–æ–≥ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {repository_name}")
        report_lines.append("üìú –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: 0")
        report_lines.append("üè∑ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: 0")
        report_lines.append("=" * 100)
        return "\n".join(report_lines)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞–ø–∫–∞–º
    folder_structure = {}
    for file_info in files_data:
        if "/" in file_info["path"]:
            folder, filename = file_info["path"].rsplit("/", 1)
        else:
            folder, filename = ("–ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è", file_info["path"])

        folder_structure.setdefault(folder, []).append((file_info["path"], filename, file_info))

    total_lines = 0
    total_tokens = 0

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    for folder, files in sorted(folder_structure.items()):
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
        folder_tokens = sum(f[2].get("tokens", 0) for f in files)

        # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–∞–ø–∫–∏ + —Å—É–º–º–∞—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        report_lines.append("--------------------------------------------------------------------------------")
        report_lines.append(f"üìÇ {folder} - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {folder_tokens}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø—É—Ç–∏
        for full_path, filename, file_data in sorted(files, key=lambda x: x[0]):
            lines_ = file_data.get('lines', 0)
            tokens_ = file_data.get('tokens', 0)
            comments_ = file_data.get('comments', 0)
            role_ = file_data.get('role', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

            total_lines += lines_
            total_tokens += tokens_

            report_lines.append(
                f"üìÑ {full_path} ‚Äî {role_} | "
                f"üî¢ {lines_} —Å—Ç—Ä–æ–∫ | üí¨ {comments_} –∫–æ–º–º. | üè∑ {tokens_} —Ç–æ–∫–µ–Ω–æ–≤"
            )

    report_lines.append("=" * 100)
    report_lines.append(f"üìä –ò—Ç–æ–≥ –ø–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: {repository_name}")
    report_lines.append(f"üìú –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines}")
    report_lines.append(f"üè∑ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
    report_lines.append("=" * 100)

    return "\n".join(report_lines)


def format_project_summary(project_name, repositories_reports):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É.
    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.
    :param repositories_reports: –î–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º (—Å–ø–∏—Å–æ–∫).
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ (str).
    """
    total_files = sum(len(repo.get("files", [])) for repo in repositories_reports if isinstance(repo, dict))
    total_lines = sum(sum(file.get("lines", 0) for file in repo.get("files", [])) for repo in repositories_reports if isinstance(repo, dict))
    total_comments = sum(sum(file.get("comments", 0) for file in repo.get("files", [])) for repo in repositories_reports if isinstance(repo, dict))
    total_tokens = sum(sum(file.get("tokens", 0) for file in repo.get("files", [])) for repo in repositories_reports if isinstance(repo, dict))

    report_lines = [
        f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {project_name}",
        "=" * 100,
        f"üìÇ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {len(repositories_reports)}",
        f"üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}",
        f"üìú –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines}",
        f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments}",
        f"üè∑ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}",
        "=" * 100,
        "\nüìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:\n"
    ]

    for idx, repo in enumerate(repositories_reports, start=1):
        if not isinstance(repo, dict):
            continue
        repo_tokens = sum(file.get("tokens", 0) for file in repo.get("files", []))
        repo_lines = sum(file.get("lines", 0) for file in repo.get("files", []))
        repo_name = repo.get("repository", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        report_lines.append(
            f"üîπ {idx}. {repo_name} ‚Äî {repo_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {repo_lines} —Å—Ç—Ä–æ–∫"
        )

    report_lines.append("\n‚ö´ –ò—Ç–æ–≥:")
    report_lines.append(f"üìå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: {total_tokens}")
    report_lines.append("=" * 100)

    return "\n".join(report_lines)
