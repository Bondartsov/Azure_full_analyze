## core/analyze/batch_analysis.py

from tqdm import tqdm
from core.analyze.repository_analysis import analyze_repository
from core.reports.summary import generate_summary
from core.logging.logger import log
from core.utils.cache import is_repo_changed
from core.azure.repo_commits import get_last_commit
import json

def analyze_all_repositories(project_name, repositories):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç.
    """
    log(f"üìä –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}...")

    repository_results = []
    with tqdm(total=len(repositories), desc="‚è≥ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞", unit="—Ä–µ–ø–æ") as progress_bar:
        for repository in repositories:
            repository_name = repository.name

            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—ç—à–∞
            latest_commit = get_last_commit(project_name, repository_name)

            # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º `latest_commit` –≤ `is_repo_changed`
            repo_changed = is_repo_changed(project_name, repository_name, latest_commit)

            # üìå –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
            print(f"\n[DEBUG] üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")
            print(f"   üîπ –ò–∑–º–µ–Ω–∏–ª—Å—è: {repo_changed}")
            print(f"   üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {latest_commit}")

            result = analyze_repository(project_name, repository, progress_bar)

            if result:
                print(f"[DEBUG] ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω, –¥–∞–Ω–Ω—ã–µ:")
                print(json.dumps(result, indent=4, ensure_ascii=False))
                repository_results.append(result)
            else:
                print(f"[DEBUG] ‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {repository_name}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    if repository_results:
        print(f"\n[DEBUG] üìä –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:")
        print(json.dumps(repository_results, indent=4, ensure_ascii=False))
        summary_path = generate_summary(project_name, repository_results)
        if summary_path:
            log(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {summary_path}")
            print(f"\nüìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {summary_path}")
    else:
        log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç: –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.", level="WARNING")

    log(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
