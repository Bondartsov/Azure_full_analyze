from core.reports.generate import generate_report
from core.utils.cache import load_repo_data_from_cache, save_repo_data_to_cache
from core.utils.token_counter import count_tokens_in_repo
from core.logging.logger import log

def analyze_repository(project_name, repository, repo_changed):
    """
    –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
      - –ï—Å–ª–∏ repo_changed=False, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∫—ç—à, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –∏ –≤—ã—Ö–æ–¥–∏–º.
      - –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –∑–∞–Ω–æ–≤–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
       {
         "repository": <str>,
         "tokens": <int>,
         "cached": <bool>,
         "files": <list[...dict...]>,
         "report_path": <str>  # –∏–ª–∏ None
       }
    """
    repository_name = repository.name

    if not repo_changed:
        # -> –±–µ—Ä—ë–º –∫—ç—à
        cached_data = load_repo_data_from_cache(project_name, repository_name)
        if not cached_data:
            # –ú–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, —á—Ç–æ is_repo_changed=False, –Ω–æ –∫—ç—à–∞ –≤—Å—ë –∂–µ –Ω–µ—Ç.
            # –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º.
            return analyze_repository_from_scratch(project_name, repository_name)

        total_tokens = cached_data.get("total_tokens", 0)
        files_data = cached_data.get("files", [])

        report_path = generate_report(project_name, repository_name, files_data)
        if report_path:
            log(f"üìÑ –û—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞ {repository_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–∏–∑ –∫—ç—à–∞): {report_path}")
            return {
                "repository": repository_name,
                "tokens": total_tokens,
                "cached": True,
                "files": files_data,
                "report_path": report_path
            }
        else:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è {repository_name}!", level="ERROR")
            return None

    # –ï—Å–ª–∏ repo_changed=True –∏–ª–∏ –∫—ç—à –ø—É—Å—Ç ‚Äî –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    return analyze_repository_from_scratch(project_name, repository_name)

def analyze_repository_from_scratch(project_name, repository_name):
    """
    –°—á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∑–∞–Ω–æ–≤–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à.
    """
    token_result = count_tokens_in_repo(project_name, repository_name)
    if not token_result or not isinstance(token_result, tuple) or len(token_result) != 2:
        log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç count_tokens_in_repo!", level="ERROR")
        return None

    files_data, total_tokens = token_result

    report_path = generate_report(project_name, repository_name, files_data)
    if not report_path:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –¥–ª—è {repository_name}", level="ERROR")
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    save_repo_data_to_cache(project_name, repository_name, total_tokens, files_data)
    log(f"üìÑ –û—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞ {repository_name} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")

    return {
        "repository": repository_name,
        "tokens": total_tokens,
        "cached": False,
        "files": files_data,
        "report_path": report_path
    }
