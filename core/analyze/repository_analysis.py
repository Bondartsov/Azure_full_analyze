import json
from tqdm import tqdm

from core.azure.repo_commits import get_all_commits, get_last_commit
from core.analyze.commit_analysis import analyze_commits
from core.reports.generate import generate_report
from core.utils.cache import is_repo_changed, save_repo_data_to_cache, load_repo_data_from_cache
from core.utils.token_counter import count_tokens_in_repo
from core.logging.logger import log


def analyze_repository(project_name, repository, progress_bar=None):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (is_repo_changed).
    2. –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ, –±–µ—Ä—ë–º –∏—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç.
    3. –ï—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑–º–µ–Ω—ë–Ω –∏–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∑–∞–Ω–æ–≤–æ —Å—á–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω—ã,
       –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç.

    :param project_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (str).
    :param repository: –û–±—ä–µ–∫—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞—Ç—Ä–∏–±—É—Ç 'name').
    :param progress_bar: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –æ–±—ä–µ–∫—Ç tqdm –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏—Ç–æ–≥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    repository_name = repository.name

    if progress_bar:
        progress_bar.set_description(f"üîç –ê–Ω–∞–ª–∏–∑: {repository_name}")

    log(f"\nüìÇ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")
    print(f"\nüìÇ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}", flush=True)

    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    latest_commit = get_last_commit(project_name, repository_name)
    repo_changed = is_repo_changed(project_name, repository_name, latest_commit)

    if not repo_changed:
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        cached_data = load_repo_data_from_cache(project_name, repository_name)
        if cached_data:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –∫—ç—à–µ —Ö—Ä–∞–Ω–∏–º (total_tokens, commit_count, files_data, analysis)
            total_tokens, commit_count, files_data, cached_analysis = cached_data

            # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫—ç—à —Å–æ–¥–µ—Ä–∂–∞–ª –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ dict {"filename.py": 123, ...},
            # —Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π [{"path": ..., "tokens": ...}]
            if isinstance(files_data, dict):
                log(f"‚ö† –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç files_data (dict). –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π...", level="WARNING")
                files_data = [{"path": k, "tokens": v} for k, v in files_data.items()]

            # –ï—Å–ª–∏ files_data –±—ã–ª–æ —Å–ø–∏—Å–∫–æ–º —á–∏—Å–µ–ª –∏–ª–∏ —á–µ–º-—Ç–æ –µ—â—ë ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º
            if not isinstance(files_data, list):
                log(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: files_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –∞ –ø–æ–ª—É—á–µ–Ω {type(files_data)}", level="ERROR")
                return None

            log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {repository_name}: {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {commit_count} –∫–æ–º–º–∏—Ç–æ–≤")
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {repository_name}: {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤, {commit_count} –∫–æ–º–º–∏—Ç–æ–≤", flush=True)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∏–∑ –∫—ç—à–∞
            report_path = generate_report(project_name, repository_name, files_data)
            if report_path:
                log(f"üìÑ –û—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
                print(f"üìÑ –û—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}", flush=True)

                if progress_bar:
                    progress_bar.update(1)

                return {
                    "repository": repository_name,
                    "tokens": total_tokens,
                    "commits": commit_count,
                    "analysis": cached_analysis,
                    "cached": True,
                    "files": files_data,
                }
            else:
                # –ï—Å–ª–∏ –æ—Ç—á—ë—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª—Å—è
                log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –∏–∑ –∫—ç—à–∞!", level="ERROR")
                return None

    # 2. –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –Ω–æ –∫—ç—à–∞ –Ω–µ—Ç, –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑–º–µ–Ω—ë–Ω ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
    log(f"üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...")
    print(f"üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...", flush=True)

    # count_tokens_in_repo –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ç–µ–∂ (files_list, total_tokens)
    result = count_tokens_in_repo(project_name, repository_name)
    if not result or not isinstance(result, tuple) or len(result) != 2:
        log(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç count_tokens_in_repo!", level="ERROR")
        return None

    files_data, total_tokens = result  # files_data ‚Üí list[{"path": str, "tokens": int}]

    log(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤", flush=True)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –≤–µ—Ä–Ω—ë—Ç –Ω–µ —Å–ø–∏—Å–æ–∫
    if not isinstance(files_data, list):
        log(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: files_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º, –∞ –ø–æ–ª—É—á–µ–Ω {type(files_data)}", level="ERROR")
        return None

    # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã
    log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...")
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...", flush=True)
    commits = get_all_commits(project_name, repository_name)
    if commits is None:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", level="ERROR")
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", flush=True)
        if progress_bar:
            progress_bar.update(1)
        return None

    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤")
    print(f"üìå –ù–∞–π–¥–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤", flush=True)

    # 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
    analysis = analyze_commits(commits) if commits else {"total_commits": 0, "top_authors": []}
    log(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:\n{json.dumps(analysis, indent=4, ensure_ascii=False)}")
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω:\n{json.dumps(analysis, indent=4, ensure_ascii=False)}", flush=True)

    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    log("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...", flush=True)
    report_path = generate_report(project_name, repository_name, files_data)

    if report_path:
        log(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}", flush=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ + –∞–Ω–∞–ª–∏–∑
        save_repo_data_to_cache(project_name, repository_name, total_tokens, len(commits), files_data, analysis)
        if progress_bar:
            progress_bar.update(1)

        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {repository_name}", flush=True)

        return {
            "repository": repository_name,
            "tokens": total_tokens,
            "commits": len(commits),
            "analysis": analysis,
            "cached": False,
            "files": files_data,
        }
    else:
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", level="ERROR")
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", flush=True)
        if progress_bar:
            progress_bar.update(1)
        return None
