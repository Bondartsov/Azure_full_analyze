from core.azure.repo_commits import get_all_commits, get_last_commit
from core.analyze.commit_analysis import analyze_commits
from core.reports.generate import generate_report
from core.utils.cache import is_repo_changed, load_repo_data_from_cache, save_repo_data_to_cache
from core.logging.logger import log
from core.utils.token_counter import count_tokens_in_repo
from core.utils.common import format_number
from tqdm import tqdm


def analyze_repository(project_name, repository, progress_bar=None):
    """–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    repository_name = repository.name
    if progress_bar:
        progress_bar.set_description(f"üîç –ê–Ω–∞–ª–∏–∑: {repository_name}")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏
    log("\n" + "=" * 80)
    print("\n" + "=" * 80, flush=True)

    log(f"üìÇ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")
    print(f"üìÇ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}", flush=True)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    latest_commit = get_last_commit(project_name, repository_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    repo_changed = is_repo_changed(project_name, repository_name, latest_commit)

    if not repo_changed:
        cached_data = load_repo_data_from_cache(project_name, repository_name)
        if cached_data:
            total_tokens, commit_count = cached_data
            if total_tokens > 0:  # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {repository_name}: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤, {format_number(commit_count)} –∫–æ–º–º–∏—Ç–æ–≤")
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {repository_name}: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤, {format_number(commit_count)} –∫–æ–º–º–∏—Ç–æ–≤", flush=True)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∏–∑ –∫—ç—à–∞
                report_path = generate_report(project_name, repository_name, total_tokens, [], {"total_commits": commit_count, "top_authors": []})
                log(f"üìÑ –û—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
                print(f"üìÑ –û—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}", flush=True)

                if progress_bar:
                    progress_bar.update(1)
                return {"repository": repository_name, "tokens": total_tokens, "commits": commit_count, "cached": True}
            else:
                log(f"‚ö† –ö—ç—à –¥–ª—è {repository_name} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º.")

    # –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤
    log(f"üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...")
    print(f"üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...", flush=True)

    token_data, total_tokens = count_tokens_in_repo(project_name, repository_name)
    log(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤", flush=True)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
    log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...")
    print(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...", flush=True)

    commits = get_all_commits(project_name, repository_name)

    if commits is None:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", level="ERROR")
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", flush=True)
        if progress_bar:
            progress_bar.update(1)
        return None

    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(commits))} –∫–æ–º–º–∏—Ç–æ–≤")
    print(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(commits))} –∫–æ–º–º–∏—Ç–æ–≤", flush=True)

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
    analysis = analyze_commits(commits) if commits else {"total_commits": 0, "top_authors": []}
    log(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {analysis}")
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {analysis}", flush=True)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    log("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    print("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...", flush=True)

    report_path = generate_report(project_name, repository_name, total_tokens, commits, analysis)

    if report_path:
        log(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}", flush=True)

        save_repo_data_to_cache(project_name, repository_name, total_tokens, len(commits))  # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        if progress_bar:
            progress_bar.update(1)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {repository_name}\n", flush=True)
        return {"repository": repository_name, "tokens": total_tokens, "commits": len(commits), "cached": False}
    else:
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", level="ERROR")
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", flush=True)
        if progress_bar:
            progress_bar.update(1)
        return None
