import os
from core.azure.connection import connect_to_azure
from core.azure.projects import get_projects
from core.azure.repos import get_repositories
from core.azure.repo_commits import get_all_commits
from core.analyze.commit_analysis import analyze_commits
from core.reports.generate import generate_report
from core.utils.common import choose_from_list
from core.logging.logger import log
from core.utils.token_counter import count_tokens_in_repo

def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (1000000 -> 1 000 000)"""
    return f"{number:,}".replace(",", " ")

def analyze_repository(project_name, repository):
    """–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    repository_name = repository.name
    log(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")

    # –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤
    log(f"üìä –ù–∞—á–∞–ª–æ –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...")
    token_data, total_tokens = count_tokens_in_repo(project_name, repository_name)
    log(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
    log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...")
    commits = get_all_commits(project_name, repository_name)

    if commits is None:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", level="ERROR")
        return

    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(commits))} –∫–æ–º–º–∏—Ç–æ–≤")

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
    analysis = analyze_commits(commits) if commits else {"total_commits": 0, "top_authors": []}
    log(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {analysis}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    log("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    report_path = generate_report(project_name, repository_name, total_tokens, commits, analysis)

    if report_path:
        log(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        print(f"\n‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {repository_name}: –ö–æ–º–º–∏—Ç–æ–≤: {format_number(len(commits))}, –¢–æ–∫–µ–Ω–æ–≤: {format_number(total_tokens)}")
        print(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
    else:
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", level="ERROR")
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!")

def main():
    log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    projects = get_projects()
    log(f"üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {projects}")
    if not projects:
        log("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", level="WARNING")
        return

    project_name = choose_from_list(projects, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç")
    log(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    repositories = get_repositories(project_name)
    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(repositories))} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.")
    if not repositories:
        log(f"‚ö† –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_name}.", level="WARNING")
        return

    # –í—ã–±–æ—Ä –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    options = ["üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"] + [repo.name for repo in repositories]
    selected_option = choose_from_list(options, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    if selected_option == "üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏":
        log(f"üìä –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}...")
        for repository in repositories:
            analyze_repository(project_name, repository)
        log(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        repository = next(repo for repo in repositories if repo.name == selected_option)
        analyze_repository(project_name, repository)

if __name__ == "__main__":
    main()
