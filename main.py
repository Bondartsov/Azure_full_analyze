import os
from core.azure.connection import connect_to_azure
from core.azure.projects import get_projects
from core.azure.repos import get_repositories
from core.azure.repo_commits import get_all_commits, get_last_commit
from core.analyze.commit_analysis import analyze_commits
from core.reports.generate import generate_report
from core.reports.summary import generate_summary
from core.utils.cache import is_repo_changed, load_repo_data_from_cache, save_repo_data_to_cache
from core.utils.common import choose_from_list
from core.logging.logger import log
from core.utils.token_counter import count_tokens_in_repo
from tqdm import tqdm


def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (1000000 -> 1 000 000)"""
    return f"{number:,}".replace(",", " ")


def analyze_repository(project_name, repository, progress_bar):
    """–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    repository_name = repository.name
    progress_bar.set_description(f"üîç –ê–Ω–∞–ª–∏–∑: {repository_name}")
    log(f"üìÇ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repository_name}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
    latest_commit = get_last_commit(project_name, repository_name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    repo_changed = is_repo_changed(project_name, repository_name, latest_commit)

    if not repo_changed:
        cached_data = load_repo_data_from_cache(project_name, repository_name)
        if cached_data:
            total_tokens, commit_count = cached_data
            if total_tokens > 0:  # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {repository_name}: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤, {format_number(commit_count)} –∫–æ–º–º–∏—Ç–æ–≤")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∏–∑ –∫—ç—à–∞
                report_path = generate_report(project_name, repository_name, total_tokens, [], {"total_commits": commit_count, "top_authors": []})
                log(f"üìÑ –û—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")

                progress_bar.update(1)
                return {"repository": repository_name, "tokens": total_tokens, "commits": commit_count, "cached": True}
            else:
                log(f"‚ö† –ö—ç—à –¥–ª—è {repository_name} –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º.")

    # –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤
    log(f"üìä –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ {repository_name}...")
    token_data, total_tokens = count_tokens_in_repo(project_name, repository_name)
    log(f"‚úÖ –ü–æ–¥—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: {format_number(total_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
    log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}...")
    commits = get_all_commits(project_name, repository_name)

    if commits is None:
        log(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è {repository_name}", level="ERROR")
        progress_bar.update(1)
        return None

    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(commits))} –∫–æ–º–º–∏—Ç–æ–≤")

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
    analysis = analyze_commits(commits) if commits else {"total_commits": 0, "top_authors": []}
    log(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: {analysis}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
    log("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
    report_path = generate_report(project_name, repository_name, total_tokens, commits, analysis)

    if report_path:
        log(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {report_path}")
        save_repo_data_to_cache(project_name, repository_name, total_tokens, len(commits))  # üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        progress_bar.update(1)
        return {"repository": repository_name, "tokens": total_tokens, "commits": len(commits), "cached": False}
    else:
        log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞!", level="ERROR")
        progress_bar.update(1)
        return None


def main():
    log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
    projects = get_projects()
    log(f"üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {projects}")
    if not projects:
        log("‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.", level="WARNING")
        return

    project_name = choose_from_list(projects, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç")
    log(f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    repositories = get_repositories(project_name)
    log(f"üìå –ù–∞–π–¥–µ–Ω–æ {format_number(len(repositories))} —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.")
    if not repositories:
        log(f"‚ö† –ù–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project_name}.", level="WARNING")
        return

    # –í—ã–±–æ—Ä –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    options = ["üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"] + [repo.name for repo in repositories]
    selected_option = choose_from_list(options, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    repository_results = []
    if selected_option == "üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏":
        log(f"üìä –ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name}...")

        with tqdm(total=len(repositories), desc="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤", unit="—Ä–µ–ø–æ") as progress_bar:
            for repository in repositories:
                result = analyze_repository(project_name, repository, progress_bar)
                if result:
                    repository_results.append(result)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        if repository_results:
            summary_path = generate_summary(project_name, repository_results)
            if summary_path:
                log(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {summary_path}")
                print(f"\nüìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {summary_path}")
        else:
            log(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç: –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.", level="WARNING")

        log(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_name} –∑–∞–≤–µ—Ä—à—ë–Ω!")
    else:
        repository = next((repo for repo in repositories if repo.name == selected_option), None)
        if not repository:
            log(f"‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {selected_option} –Ω–µ –Ω–∞–π–¥–µ–Ω.", level="ERROR")
            return

        with tqdm(total=1, desc=f"üîç –ê–Ω–∞–ª–∏–∑: {repository.name}", unit="—Ä–µ–ø–æ") as progress_bar:
            analyze_repository(project_name, repository, progress_bar)


if __name__ == "__main__":
    main()
