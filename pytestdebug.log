versions pytest-8.3.4, python-3.13.1.final.0
invocation_dir=D:\Projects\Azure_full_analyze
cwd=D:\Projects\Azure_full_analyze
args=('tests/', '--debug')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000002A5CD296BA0>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000002A5CD296BA0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002A5CD4D2A50>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002A5CD4D2CF0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
    early skip of rewriting module: rlcompleter [assertion]
    early skip of rewriting module: readline [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
          plugin_name: 2911134892112
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000002A5CD296BA0>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_benchmark.plugin' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest_benchmark\\plugin.py'>
          plugin_name: benchmark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002A5CD4D2510>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002A5CD3C6FD0>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002A5CD4D2A50>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002A5CD4D2CF0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000002A5CD4D3380>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000002A5CEF00830>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: socket [assertion]
    early skip of rewriting module: _socket [assertion]
    early skip of rewriting module: selectors [assertion]
    early skip of rewriting module: select [assertion]
    matched marked file 'pytest_benchmark.storage' (from 'pytest_benchmark') [assertion]
    find_module called for: pytest_benchmark.storage [assertion]
    found cached rewritten pyc for D:\Projects\Azure_full_analyze\venv\Lib\site-packages\pytest_benchmark\storage\__init__.py [assertion]
    matched marked file 'pytest_benchmark.storage.file' (from 'pytest_benchmark') [assertion]
    find_module called for: pytest_benchmark.storage.file [assertion]
    found cached rewritten pyc for D:\Projects\Azure_full_analyze\venv\Lib\site-packages\pytest_benchmark\storage\file.py [assertion]
      pytest_plugin_registered [hook]
          plugin: <pytest_benchmark.session.BenchmarkSession object at 0x000002A5CEF017F0>
          plugin_name: pytest-benchmark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
          plugin_name: 2911134892112
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000002A5CD296BA0>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_benchmark.plugin' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest_benchmark\\plugin.py'>
          plugin_name: benchmark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=9 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002A5CD4D2510>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=11 _state='suspended' tmpfile=<EncodedFile name='<tempfile._TemporaryFileWrapper object at 0x000002A5CD3C6FD0>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=7 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000002A5CD4D2A50>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000002A5CD4D2CF0>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000002A5CD4D3380>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000002A5CEF00830>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_benchmark.session.BenchmarkSession object at 0x000002A5CEF017F0>
          plugin_name: pytest-benchmark
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000002A5CEF00C20>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x000002A5CD294050>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          start_path: D:\Projects\Azure_full_analyze
          startdir: D:\Projects\Azure_full_analyze
      early skip of rewriting module: importlib.metadata._adapters [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: base64 [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      early skip of rewriting module: importlib.metadata._text [assertion]
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: D:\\Projects\\Azure_full_analyze', 'plugins: benchmark-5.1.0'], 'benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)', ['using: pytest-8.3.4', 'registered third-party plugins:', '  pytest-benchmark-5.1.0 at D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest_benchmark\\plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests/'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=WindowsPath('D:/Projects/Azure_full_analyze/tests'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: D:\Projects\Azure_full_analyze
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir Azure_full_analyze> [hook]
            pytest_collectstart [hook]
                collector: <Dir Azure_full_analyze>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir Azure_full_analyze>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.benchmarks
                  path: D:\Projects\Azure_full_analyze\.benchmarks
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.env
                  path: D:\Projects\Azure_full_analyze\.env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\.env
                  path: D:\Projects\Azure_full_analyze\.env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.git
                  path: D:\Projects\Azure_full_analyze\.git
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.gitignore
                  path: D:\Projects\Azure_full_analyze\.gitignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\.gitignore
                  path: D:\Projects\Azure_full_analyze\.gitignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.pytest_cache
                  path: D:\Projects\Azure_full_analyze\.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\.venv
                  path: D:\Projects\Azure_full_analyze\.venv
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\README.MD
                  path: D:\Projects\Azure_full_analyze\README.MD
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\README.MD
                  path: D:\Projects\Azure_full_analyze\README.MD
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\ai_reports
                  path: D:\Projects\Azure_full_analyze\ai_reports
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\ai_reports
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Dir ai_reports> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\cache
                  path: D:\Projects\Azure_full_analyze\cache
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\cache
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Dir cache> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\config
                  path: D:\Projects\Azure_full_analyze\config
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\config
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Dir config> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\core
                  path: D:\Projects\Azure_full_analyze\core
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\core
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Package core> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\logs.db
                  path: D:\Projects\Azure_full_analyze\logs.db
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\logs.db
                  path: D:\Projects\Azure_full_analyze\logs.db
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\main.py
                  path: D:\Projects\Azure_full_analyze\main.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\main.py
                  path: D:\Projects\Azure_full_analyze\main.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\pytestdebug.log
                  path: D:\Projects\Azure_full_analyze\pytestdebug.log
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\pytestdebug.log
                  path: D:\Projects\Azure_full_analyze\pytestdebug.log
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\rag_data.json
                  path: D:\Projects\Azure_full_analyze\rag_data.json
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\rag_data.json
                  path: D:\Projects\Azure_full_analyze\rag_data.json
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\reports
                  path: D:\Projects\Azure_full_analyze\reports
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\reports
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Dir reports> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\requirements.txt
                  path: D:\Projects\Azure_full_analyze\requirements.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Azure_full_analyze>
                  file_path: D:\Projects\Azure_full_analyze\requirements.txt
                  path: D:\Projects\Azure_full_analyze\requirements.txt
              finish pytest_collect_file --> [] [hook]
              pytest_collect_directory [hook]
                  path: D:\Projects\Azure_full_analyze\tests
                  parent: <Dir Azure_full_analyze>
              finish pytest_collect_directory --> <Package tests> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                  collection_path: D:\Projects\Azure_full_analyze\venv
                  path: D:\Projects\Azure_full_analyze\venv
              finish pytest_ignore_collect --> True [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=6 outcome='passed'> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package tests> [collection]
      pytest_collectstart [hook]
          collector: <Package tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\__init__.py
            path: D:\Projects\Azure_full_analyze\tests\__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\__init__.py
            path: D:\Projects\Azure_full_analyze\tests\__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\__pycache__
            path: D:\Projects\Azure_full_analyze\tests\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
            path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
            path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
              path: D:\Projects\Azure_full_analyze\tests\test_api_key.py
          finish pytest_pycollect_makemodule --> <Module test_api_key.py> [hook]
        finish pytest_collect_file --> [<Module test_api_key.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_cache.py
            path: D:\Projects\Azure_full_analyze\tests\test_cache.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_cache.py
            path: D:\Projects\Azure_full_analyze\tests\test_cache.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_cache.py
              path: D:\Projects\Azure_full_analyze\tests\test_cache.py
          finish pytest_pycollect_makemodule --> <Module test_cache.py> [hook]
        finish pytest_collect_file --> [<Module test_cache.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
            path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
            path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
              path: D:\Projects\Azure_full_analyze\tests\test_code_advisor.py
          finish pytest_pycollect_makemodule --> <Module test_code_advisor.py> [hook]
        finish pytest_collect_file --> [<Module test_code_advisor.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
            path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
            path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
              path: D:\Projects\Azure_full_analyze\tests\test_formatter.py
          finish pytest_pycollect_makemodule --> <Module test_formatter.py> [hook]
        finish pytest_collect_file --> [<Module test_formatter.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_generate.py
            path: D:\Projects\Azure_full_analyze\tests\test_generate.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_generate.py
            path: D:\Projects\Azure_full_analyze\tests\test_generate.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_generate.py
              path: D:\Projects\Azure_full_analyze\tests\test_generate.py
          finish pytest_pycollect_makemodule --> <Module test_generate.py> [hook]
        finish pytest_collect_file --> [<Module test_generate.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
            path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
            path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
              path: D:\Projects\Azure_full_analyze\tests\test_rag_integration.py
          finish pytest_pycollect_makemodule --> <Module test_rag_integration.py> [hook]
        finish pytest_collect_file --> [<Module test_rag_integration.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
            path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
            path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
              path: D:\Projects\Azure_full_analyze\tests\test_report_generator.py
          finish pytest_pycollect_makemodule --> <Module test_report_generator.py> [hook]
        finish pytest_collect_file --> [<Module test_report_generator.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
            path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
            path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
              path: D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py
          finish pytest_pycollect_makemodule --> <Module test_structure_analysis.py> [hook]
        finish pytest_collect_file --> [<Module test_structure_analysis.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            collection_path: D:\Projects\Azure_full_analyze\tests\test_summary.py
            path: D:\Projects\Azure_full_analyze\tests\test_summary.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package tests>
            file_path: D:\Projects\Azure_full_analyze\tests\test_summary.py
            path: D:\Projects\Azure_full_analyze\tests\test_summary.py
          pytest_pycollect_makemodule [hook]
              parent: <Package tests>
              module_path: D:\Projects\Azure_full_analyze\tests\test_summary.py
              path: D:\Projects\Azure_full_analyze\tests\test_summary.py
          finish pytest_pycollect_makemodule --> <Module test_summary.py> [hook]
        finish pytest_collect_file --> [<Module test_summary.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=9 outcome='passed'> [hook]
    genitems <Module test_api_key.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_api_key.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_api_key.py>
      find_module called for: tests [assertion]
      find_module called for: tests.test_api_key [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_api_key.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_api_key.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: re
            obj: <module 're' from 'C:\\Python313\\Lib\\re\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: api_key
            obj: <function api_key at 0x000002A5CEE9D9E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: test_api_key_exists
            obj: <function test_api_key_exists at 0x000002A5CEE9DA80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CEE646E0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_api_key_exists>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: test_api_key_format
            obj: <function test_api_key_format at 0x000002A5CEE9DB20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CD52FED0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_api_key_format>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_api_key.py>
            name: test_api_key_no_invalid_chars
            obj: <function test_api_key_no_invalid_chars at 0x000002A5CEE9DBC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CD52FED0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_api_key_no_invalid_chars>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_api_key.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_api_key_exists> [collection]
      pytest_itemcollected [hook]
          item: <Function test_api_key_exists>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_api_key_format> [collection]
      pytest_itemcollected [hook]
          item: <Function test_api_key_format>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_api_key_no_invalid_chars> [collection]
      pytest_itemcollected [hook]
          item: <Function test_api_key_no_invalid_chars>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_api_key.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_cache.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_cache.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_cache.py>
      find_module called for: tests.test_cache [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_cache.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_cache.py [assertion]
      early skip of rewriting module: core [assertion]
      early skip of rewriting module: core.utils [assertion]
      early skip of rewriting module: core.utils.cache [assertion]
      early skip of rewriting module: core.logging [assertion]
      early skip of rewriting module: core.logging.logger [assertion]
      early skip of rewriting module: sqlite3 [assertion]
      early skip of rewriting module: sqlite3.dbapi2 [assertion]
      early skip of rewriting module: _sqlite3 [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: CACHE_DIR
            obj: cache
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: get_cache_path
            obj: <function get_cache_path at 0x000002A5CEE9E700>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: clear_cache_for_repo
            obj: <function clear_cache_for_repo at 0x000002A5CEE9FB00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: clear_project_summary_cache
            obj: <function clear_project_summary_cache at 0x000002A5CEE9FBA0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: fake_cache_dir
            obj: <function fake_cache_dir at 0x000002A5CEE9E660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: test_clear_cache_for_repo
            obj: <function test_clear_cache_for_repo at 0x000002A5CEE9FC40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CEE54770>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_clear_cache_for_repo>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_cache.py>
            name: test_clear_project_summary_cache
            obj: <function test_clear_project_summary_cache at 0x000002A5CEE9FCE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CEE54770>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_clear_project_summary_cache>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_cache.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_clear_cache_for_repo> [collection]
      pytest_itemcollected [hook]
          item: <Function test_clear_cache_for_repo>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_clear_project_summary_cache> [collection]
      pytest_itemcollected [hook]
          item: <Function test_clear_project_summary_cache>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_cache.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_code_advisor.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_code_advisor.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_code_advisor.py>
      find_module called for: tests.test_code_advisor [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_code_advisor.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_code_advisor.py [assertion]
      early skip of rewriting module: core.ai [assertion]
      early skip of rewriting module: core.ai.code_advisor [assertion]
      early skip of rewriting module: openai [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: aiohttp [assertion]
      early skip of rewriting module: aiohttp.hdrs [assertion]
      early skip of rewriting module: multidict [assertion]
      early skip of rewriting module: multidict._abc [assertion]
      early skip of rewriting module: multidict._compat [assertion]
      early skip of rewriting module: multidict._multidict [assertion]
      early skip of rewriting module: multidict._multidict_base [assertion]
      early skip of rewriting module: aiohttp.client [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.mixins [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.timeouts [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.taskgroups [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.windows_events [assertion]
      early skip of rewriting module: _overlapped [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.proactor_events [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: asyncio.windows_utils [assertion]
      early skip of rewriting module: hashlib [assertion]
      early skip of rewriting module: _hashlib [assertion]
      early skip of rewriting module: _blake2 [assertion]
      early skip of rewriting module: attr [assertion]
      early skip of rewriting module: attr.converters [assertion]
      early skip of rewriting module: attr._compat [assertion]
      early skip of rewriting module: attr._make [assertion]
      early skip of rewriting module: attr._config [assertion]
      early skip of rewriting module: attr.setters [assertion]
      early skip of rewriting module: attr.exceptions [assertion]
      early skip of rewriting module: attr.filters [assertion]
      early skip of rewriting module: attr.validators [assertion]
      early skip of rewriting module: attr._cmp [assertion]
      early skip of rewriting module: attr._funcs [assertion]
      early skip of rewriting module: attr._next_gen [assertion]
      early skip of rewriting module: attr._version_info [assertion]
      early skip of rewriting module: yarl [assertion]
      early skip of rewriting module: yarl._query [assertion]
      early skip of rewriting module: yarl._quoters [assertion]
      early skip of rewriting module: yarl._quoting [assertion]
      early skip of rewriting module: yarl._quoting_c [assertion]
      early skip of rewriting module: yarl._url [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: propcache [assertion]
      early skip of rewriting module: propcache.api [assertion]
      early skip of rewriting module: propcache._helpers [assertion]
      early skip of rewriting module: propcache._helpers_c [assertion]
      early skip of rewriting module: yarl._parse [assertion]
      early skip of rewriting module: yarl._path [assertion]
      early skip of rewriting module: aiohttp.http [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: aiohttp.http_exceptions [assertion]
      early skip of rewriting module: aiohttp.typedefs [assertion]
      early skip of rewriting module: aiohttp.http_parser [assertion]
      early skip of rewriting module: aiohttp.base_protocol [assertion]
      early skip of rewriting module: aiohttp.client_exceptions [assertion]
      early skip of rewriting module: aiohttp.helpers [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: nturl2path [assertion]
      early skip of rewriting module: aiohttp.log [assertion]
      early skip of rewriting module: aiohttp.tcp_helpers [assertion]
      early skip of rewriting module: aiohttp.compression_utils [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: aiohttp.http_writer [assertion]
      early skip of rewriting module: aiohttp.abc [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: aiohttp._http_writer [assertion]
      early skip of rewriting module: aiohttp.streams [assertion]
      early skip of rewriting module: aiohttp._http_parser [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: aiohttp.http_websocket [assertion]
      early skip of rewriting module: aiohttp._websocket [assertion]
      early skip of rewriting module: aiohttp._websocket.helpers [assertion]
      early skip of rewriting module: aiohttp._websocket.models [assertion]
      early skip of rewriting module: aiohttp._websocket.mask [assertion]
      early skip of rewriting module: aiohttp._websocket.reader [assertion]
      early skip of rewriting module: aiohttp._websocket.reader_c [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: aiohttp._websocket.writer [assertion]
      early skip of rewriting module: aiohttp.payload [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: aiohttp.client_reqrep [assertion]
      early skip of rewriting module: aiohttp.multipart [assertion]
      early skip of rewriting module: aiohttp.formdata [assertion]
      early skip of rewriting module: aiohttp.client_ws [assertion]
      early skip of rewriting module: aiohttp.connector [assertion]
      early skip of rewriting module: aiohappyeyeballs [assertion]
      early skip of rewriting module: aiohappyeyeballs.impl [assertion]
      early skip of rewriting module: aiohappyeyeballs._staggered [assertion]
      early skip of rewriting module: aiohappyeyeballs.types [assertion]
      early skip of rewriting module: aiohappyeyeballs.utils [assertion]
      early skip of rewriting module: aiohttp.client_proto [assertion]
      early skip of rewriting module: aiohttp.resolver [assertion]
      early skip of rewriting module: aiodns [assertion]
      early skip of rewriting module: aiohttp.cookiejar [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: pickle [assertion]
      early skip of rewriting module: _compat_pickle [assertion]
      early skip of rewriting module: _pickle [assertion]
      early skip of rewriting module: aiohttp.tracing [assertion]
      early skip of rewriting module: aiosignal [assertion]
      early skip of rewriting module: frozenlist [assertion]
      early skip of rewriting module: frozenlist._frozenlist [assertion]
      early skip of rewriting module: aiohttp.payload_streamer [assertion]
      early skip of rewriting module: openai.api_resources [assertion]
      early skip of rewriting module: openai.api_resources.audio [assertion]
      early skip of rewriting module: openai.api_requestor [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3._base_connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.util [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: urllib3._request_methods [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.http2 [assertion]
      early skip of rewriting module: urllib3.http2.probe [assertion]
      early skip of rewriting module: urllib3.util.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: charset_normalizer [assertion]
      early skip of rewriting module: charset_normalizer.api [assertion]
      early skip of rewriting module: charset_normalizer.cd [assertion]
      early skip of rewriting module: charset_normalizer.constant [assertion]
      early skip of rewriting module: charset_normalizer.md [assertion]
      early skip of rewriting module: charset_normalizer.md__mypyc [assertion]
      early skip of rewriting module: charset_normalizer.utils [assertion]
      early skip of rewriting module: _multibytecodec [assertion]
      early skip of rewriting module: charset_normalizer.models [assertion]
      early skip of rewriting module: charset_normalizer.legacy [assertion]
      early skip of rewriting module: charset_normalizer.version [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: importlib.resources._adapters [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
      early skip of rewriting module: openai.error [assertion]
      early skip of rewriting module: openai.util [assertion]
      early skip of rewriting module: openai.version [assertion]
      early skip of rewriting module: openai.openai_response [assertion]
      early skip of rewriting module: openai.api_resources.abstract [assertion]
      early skip of rewriting module: openai.api_resources.abstract.api_resource [assertion]
      early skip of rewriting module: openai.openai_object [assertion]
      early skip of rewriting module: openai.api_resources.abstract.createable_api_resource [assertion]
      early skip of rewriting module: openai.api_resources.abstract.deletable_api_resource [assertion]
      early skip of rewriting module: openai.api_resources.abstract.listable_api_resource [assertion]
      early skip of rewriting module: openai.api_resources.abstract.nested_resource_class_methods [assertion]
      early skip of rewriting module: openai.api_resources.abstract.paginatable_api_resource [assertion]
      early skip of rewriting module: openai.api_resources.abstract.updateable_api_resource [assertion]
      early skip of rewriting module: openai.api_resources.chat_completion [assertion]
      early skip of rewriting module: openai.api_resources.abstract.engine_api_resource [assertion]
      early skip of rewriting module: pydoc [assertion]
      early skip of rewriting module: pkgutil [assertion]
      early skip of rewriting module: sysconfig [assertion]
      early skip of rewriting module: _pyrepl [assertion]
      early skip of rewriting module: _pyrepl.pager [assertion]
      early skip of rewriting module: _sysconfig [assertion]
      early skip of rewriting module: openai.api_resources.completion [assertion]
      early skip of rewriting module: openai.api_resources.customer [assertion]
      early skip of rewriting module: openai.api_resources.deployment [assertion]
      early skip of rewriting module: openai.api_resources.edit [assertion]
      early skip of rewriting module: openai.api_resources.embedding [assertion]
      early skip of rewriting module: openai.datalib [assertion]
      early skip of rewriting module: openai.datalib.numpy_helper [assertion]
      early skip of rewriting module: openai.datalib.common [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: openai.api_resources.engine [assertion]
      early skip of rewriting module: openai.api_resources.error_object [assertion]
      early skip of rewriting module: openai.api_resources.file [assertion]
      early skip of rewriting module: openai.api_resources.fine_tune [assertion]
      early skip of rewriting module: openai.api_resources.fine_tuning [assertion]
      early skip of rewriting module: openai.api_resources.image [assertion]
      early skip of rewriting module: openai.api_resources.model [assertion]
      early skip of rewriting module: openai.api_resources.moderation [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: query_openai
            obj: <function query_openai at 0x000002A5CEF282C0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: test_prompt
            obj: <function test_prompt at 0x000002A5CEF28220>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_code_advisor.py>
            name: test_query_openai
            obj: <function test_query_openai at 0x000002A5CEF28400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CFB4C3B0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_query_openai>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_code_advisor.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_query_openai> [collection]
      pytest_itemcollected [hook]
          item: <Function test_query_openai>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_code_advisor.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_formatter.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_formatter.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_formatter.py>
      find_module called for: tests.test_formatter [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_formatter.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_formatter.py [assertion]
      early skip of rewriting module: core.reports [assertion]
      early skip of rewriting module: core.reports.report_formatter [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: format_repository_report
            obj: <function format_repository_report at 0x000002A5CFB4A8E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: format_project_summary
            obj: <function format_project_summary at 0x000002A5CFB4A980>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: test_repository_data
            obj: <function test_repository_data at 0x000002A5CFB4A840>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_formatter.py>
            name: test_format_repository_report
            obj: <function test_format_repository_report at 0x000002A5CFB4AA20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CF9DD260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_format_repository_report>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_formatter.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_format_repository_report> [collection]
      pytest_itemcollected [hook]
          item: <Function test_format_repository_report>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_formatter.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_generate.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_generate.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_generate.py>
      find_module called for: tests.test_generate [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_generate.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_generate.py [assertion]
      early skip of rewriting module: core.reports.generate [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: generate_report
            obj: <function generate_report at 0x000002A5CFB4AE80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: test_repository_data
            obj: <function test_repository_data at 0x000002A5CFB4ADE0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_generate.py>
            name: test_generate_report
            obj: <function test_generate_report at 0x000002A5CFB4AF20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CF9DD370>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_report>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_generate.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_generate_report> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_report>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_generate.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_rag_integration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_rag_integration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_rag_integration.py>
      find_module called for: tests.test_rag_integration [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_rag_integration.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_rag_integration.py [assertion]
      early skip of rewriting module: core.ai.rag_manager [assertion]
      early skip of rewriting module: core.ai.rag_storage [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: store_in_rag
            obj: <function store_in_rag at 0x000002A5CFB4B380>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: query_rag
            obj: <function query_rag at 0x000002A5CFB4B4C0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: sample_text
            obj: <function sample_text at 0x000002A5CFB4B2E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: sample_query
            obj: <function sample_query at 0x000002A5CFB4B6A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: sample_metadata
            obj: <function sample_metadata at 0x000002A5CFB4B7E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: test_store_in_rag
            obj: <function test_store_in_rag at 0x000002A5CFB4B880>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CF99EF50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_store_in_rag>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_rag_integration.py>
            name: test_query_rag
            obj: <function test_query_rag at 0x000002A5CFB4B920>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5CF99EF50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_query_rag>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_rag_integration.py' lenresult=2 outcome='passed'> [hook]
    genitems <Function test_store_in_rag> [collection]
      pytest_itemcollected [hook]
          item: <Function test_store_in_rag>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_query_rag> [collection]
      pytest_itemcollected [hook]
          item: <Function test_query_rag>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_rag_integration.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_report_generator.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_report_generator.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_report_generator.py>
      find_module called for: tests.test_report_generator [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_report_generator.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_report_generator.py [assertion]
      early skip of rewriting module: core.ai.report_generator [assertion]
      early skip of rewriting module: core.utils.token_counter [assertion]
      early skip of rewriting module: tiktoken [assertion]
      early skip of rewriting module: tiktoken.core [assertion]
      early skip of rewriting module: concurrent.futures.thread [assertion]
      early skip of rewriting module: regex [assertion]
      early skip of rewriting module: regex.regex [assertion]
      early skip of rewriting module: regex._regex_core [assertion]
      early skip of rewriting module: regex._regex [assertion]
      early skip of rewriting module: regex.DEFAULT_VERSION [assertion]
      early skip of rewriting module: tiktoken._tiktoken [assertion]
      early skip of rewriting module: tiktoken.model [assertion]
      early skip of rewriting module: tiktoken.registry [assertion]
      early skip of rewriting module: tiktoken_ext [assertion]
      early skip of rewriting module: tqdm [assertion]
      early skip of rewriting module: tqdm._monitor [assertion]
      early skip of rewriting module: tqdm._tqdm_pandas [assertion]
      early skip of rewriting module: tqdm.cli [assertion]
      early skip of rewriting module: tqdm.std [assertion]
      early skip of rewriting module: tqdm.utils [assertion]
      early skip of rewriting module: tqdm.version [assertion]
      early skip of rewriting module: tqdm._dist_ver [assertion]
      early skip of rewriting module: tqdm.gui [assertion]
      early skip of rewriting module: core.azure [assertion]
      early skip of rewriting module: core.azure.repo_commits [assertion]
      early skip of rewriting module: core.azure.connection [assertion]
      early skip of rewriting module: configparser [assertion]
      early skip of rewriting module: azure [assertion]
      early skip of rewriting module: azure.devops [assertion]
      early skip of rewriting module: azure.devops.connection [assertion]
      early skip of rewriting module: msrest [assertion]
      early skip of rewriting module: msrest.version [assertion]
      early skip of rewriting module: msrest.configuration [assertion]
      early skip of rewriting module: msrest.pipeline [assertion]
      early skip of rewriting module: urlparse [assertion]
      early skip of rewriting module: msrest.pipeline.async_abc [assertion]
      early skip of rewriting module: msrest.universal_http [assertion]
      early skip of rewriting module: urlparse [assertion]
      early skip of rewriting module: msrest.exceptions [assertion]
      early skip of rewriting module: azure.core [assertion]
      early skip of rewriting module: azure.core._version [assertion]
      early skip of rewriting module: azure.core._pipeline_client [assertion]
      early skip of rewriting module: azure.core.configuration [assertion]
      early skip of rewriting module: azure.core.pipeline [assertion]
      early skip of rewriting module: azure.core.pipeline._base [assertion]
      early skip of rewriting module: azure.core.pipeline.policies [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._base [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._authentication [assertion]
      early skip of rewriting module: azure.core.credentials [assertion]
      early skip of rewriting module: typing_extensions [assertion]
      early skip of rewriting module: azure.core.pipeline.transport [assertion]
      early skip of rewriting module: azure.core.pipeline.transport._base [assertion]
      early skip of rewriting module: azure.core.exceptions [assertion]
      early skip of rewriting module: azure.core.utils [assertion]
      early skip of rewriting module: azure.core.utils._connection_string_parser [assertion]
      early skip of rewriting module: azure.core.utils._utils [assertion]
      early skip of rewriting module: azure.core.utils._pipeline_transport_rest_shared [assertion]
      early skip of rewriting module: email.policy [assertion]
      early skip of rewriting module: email.headerregistry [assertion]
      early skip of rewriting module: email._header_value_parser [assertion]
      early skip of rewriting module: email.contentmanager [assertion]
      early skip of rewriting module: azure.core.pipeline._tools [assertion]
      early skip of rewriting module: azure.core.pipeline.transport._base_async [assertion]
      early skip of rewriting module: azure.core.utils._pipeline_transport_rest_shared_async [assertion]
      early skip of rewriting module: azure.core.pipeline._tools_async [assertion]
      early skip of rewriting module: azure.core.rest [assertion]
      early skip of rewriting module: azure.core.rest._rest_py3 [assertion]
      early skip of rewriting module: azure.core.rest._helpers [assertion]
      early skip of rewriting module: azure.core.serialization [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._utils [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._custom_hook [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._redirect [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._retry [assertion]
      early skip of rewriting module: azure.core._enum_meta [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._distributed_tracing [assertion]
      early skip of rewriting module: azure.core.settings [assertion]
      early skip of rewriting module: azure.core.tracing [assertion]
      early skip of rewriting module: azure.core.tracing._abstract_span [assertion]
      early skip of rewriting module: azure.core._azure_clouds [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._universal [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._base_async [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._authentication_async [assertion]
      early skip of rewriting module: azure.core.credentials_async [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._redirect_async [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._retry_async [assertion]
      early skip of rewriting module: azure.core.pipeline.policies._sensitive_header_cleanup_policy [assertion]
      early skip of rewriting module: azure.core.pipeline._base_async [assertion]
      early skip of rewriting module: azure.core._match_conditions [assertion]
      early skip of rewriting module: azure.core._pipeline_client_async [assertion]
      early skip of rewriting module: msrest.universal_http.async_abc [assertion]
      early skip of rewriting module: msrest.universal_http.requests [assertion]
      early skip of rewriting module: oauthlib [assertion]
      early skip of rewriting module: oauthlib.oauth2 [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749 [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.authorization [assertion]
      early skip of rewriting module: oauthlib.common [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.utils [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.base [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.errors [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.introspect [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.metadata [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.authorization_code [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.base [assertion]
      early skip of rewriting module: oauthlib.uri_validate [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.request_validator [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.client_credentials [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.implicit [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.refresh_token [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.grant_types.resource_owner_password_credentials [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.revocation [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.token [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.pre_configured [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.tokens [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.endpoints.resource [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.backend_application [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.parameters [assertion]
      early skip of rewriting module: oauthlib.signals [assertion]
      early skip of rewriting module: blinker [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.base [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.legacy_application [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.mobile_application [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.service_application [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc6749.clients.web_application [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc8628 [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc8628.clients [assertion]
      early skip of rewriting module: oauthlib.oauth2.rfc8628.clients.device [assertion]
      early skip of rewriting module: msrest.pipeline.universal [assertion]
      early skip of rewriting module: msrest.http_logger [assertion]
      early skip of rewriting module: msrest.service_client [assertion]
      early skip of rewriting module: urlparse [assertion]
      early skip of rewriting module: msrest.authentication [assertion]
      early skip of rewriting module: requests_oauthlib [assertion]
      early skip of rewriting module: requests_oauthlib.oauth1_auth [assertion]
      early skip of rewriting module: oauthlib.oauth1 [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849 [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.parameters [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.utils [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.signature [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.access_token [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.errors [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.base [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.authorization [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.request_token [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.resource [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.signature_only [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.endpoints.pre_configured [assertion]
      early skip of rewriting module: oauthlib.oauth1.rfc5849.request_validator [assertion]
      early skip of rewriting module: requests_oauthlib.oauth1_session [assertion]
      early skip of rewriting module: requests_oauthlib.oauth2_auth [assertion]
      early skip of rewriting module: requests_oauthlib.oauth2_session [assertion]
      early skip of rewriting module: msrest.pipeline.requests [assertion]
      early skip of rewriting module: msrest.serialization [assertion]
      early skip of rewriting module: urllib.quote [assertion]
      early skip of rewriting module: isodate [assertion]
      early skip of rewriting module: isodate.duration [assertion]
      early skip of rewriting module: isodate.isodates [assertion]
      early skip of rewriting module: isodate.isoerror [assertion]
      early skip of rewriting module: isodate.isostrf [assertion]
      early skip of rewriting module: isodate.isotzinfo [assertion]
      early skip of rewriting module: isodate.tzinfo [assertion]
      early skip of rewriting module: isodate.isodatetime [assertion]
      early skip of rewriting module: isodate.isotime [assertion]
      early skip of rewriting module: isodate.isoduration [assertion]
      early skip of rewriting module: isodate.version [assertion]
      early skip of rewriting module: azure.devops._file_cache [assertion]
      early skip of rewriting module: azure.devops.client_configuration [assertion]
      early skip of rewriting module: azure.devops.version [assertion]
      early skip of rewriting module: azure.devops.exceptions [assertion]
      early skip of rewriting module: azure.devops.released [assertion]
      early skip of rewriting module: azure.devops.released.client_factory [assertion]
      early skip of rewriting module: azure.devops.v7_1 [assertion]
      early skip of rewriting module: azure.devops.v7_1.location [assertion]
      early skip of rewriting module: azure.devops.v7_1.location.models [assertion]
      early skip of rewriting module: azure.devops.v7_1.location.location_client [assertion]
      early skip of rewriting module: azure.devops.client [assertion]
      early skip of rewriting module: azure.devops._models [assertion]
      early skip of rewriting module: azure.devops.v7_1.client_factory [assertion]
      early skip of rewriting module: azure.devops.v7_0 [assertion]
      early skip of rewriting module: azure.devops.v7_0.client_factory [assertion]
      early skip of rewriting module: azure.devops.v7_0.git [assertion]
      early skip of rewriting module: azure.devops.v7_0.git.models [assertion]
      early skip of rewriting module: azure.devops.v7_0.git.git_client [assertion]
      early skip of rewriting module: azure.devops.v7_0.git.git_client_base [assertion]
      early skip of rewriting module: core.azure.repos [assertion]
      early skip of rewriting module: dotenv [assertion]
      early skip of rewriting module: dotenv.main [assertion]
      early skip of rewriting module: dotenv.parser [assertion]
      early skip of rewriting module: dotenv.variables [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: generate_ai_report
            obj: <function generate_ai_report at 0x000002A5CFB30040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: mock_analysis
            obj: <function mock_analysis at 0x000002A5CFB4BF60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_report_generator.py>
            name: test_generate_ai_report
            obj: <function test_generate_ai_report at 0x000002A5CFB30220>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5D0DB0050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_ai_report>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_report_generator.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_generate_ai_report> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_ai_report>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_report_generator.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_structure_analysis.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_structure_analysis.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_structure_analysis.py>
      find_module called for: tests.test_structure_analysis [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_structure_analysis.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_structure_analysis.py [assertion]
      early skip of rewriting module: core.ai.structure_analysis [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: analyze_structure
            obj: <function analyze_structure at 0x000002A5D0DBACA0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: test_python_code
            obj: <function test_python_code at 0x000002A5D0DBAC00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_structure_analysis.py>
            name: test_analyze_structure
            obj: <function test_analyze_structure at 0x000002A5D0DBAD40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5D0DB0050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_analyze_structure>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_structure_analysis.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_analyze_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_analyze_structure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_structure_analysis.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_summary.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_summary.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_summary.py>
      find_module called for: tests.test_summary [assertion]
      matched test file 'D:\\Projects\\Azure_full_analyze\\tests\\test_summary.py' [assertion]
      found cached rewritten pyc for D:\Projects\Azure_full_analyze\tests\test_summary.py [assertion]
      early skip of rewriting module: core.reports.summary [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: pytest
            obj: <module 'pytest' from 'D:\\Projects\\Azure_full_analyze\\venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: generate_summary
            obj: <function generate_summary at 0x000002A5D0DBB2E0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: test_repositories
            obj: <function test_repositories at 0x000002A5D0DBB240>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_summary.py>
            name: test_generate_summary
            obj: <function test_generate_summary at 0x000002A5D0DBB380>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000002A5D0EDFE70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_summary>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_summary.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_generate_summary> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_summary>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_summary.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          items: [<Function test_api_key_exists>, <Function test_api_key_format>, <Function test_api_key_no_invalid_chars>, <Function test_clear_cache_for_repo>, <Function test_clear_project_summary_cache>, <Function test_query_openai>, <Function test_format_repository_report>, <Function test_generate_report>, <Function test_store_in_rag>, <Function test_query_rag>, <Function test_generate_ai_report>, <Function test_analyze_structure>, <Function test_generate_summary>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
            items: [<Function test_api_key_exists>, <Function test_api_key_format>, <Function test_api_key_no_invalid_chars>, <Function test_clear_cache_for_repo>, <Function test_clear_project_summary_cache>, <Function test_query_openai>, <Function test_format_repository_report>, <Function test_generate_report>, <Function test_store_in_rag>, <Function test_query_rag>, <Function test_generate_ai_report>, <Function test_analyze_structure>, <Function test_generate_summary>]
            start_path: D:\Projects\Azure_full_analyze
            startdir: D:\Projects\Azure_full_analyze
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=13>
      pytest_runtest_protocol [hook]
          item: <Function test_api_key_exists>
          nextitem: <Function test_api_key_format>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_api_key.py::test_api_key_exists
            location: ('tests\\test_api_key.py', 9, 'test_api_key_exists')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_api_key_exists>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_exists>>
          finish pytest_fixture_setup --> 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юч [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_exists>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_exists' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_api_key_exists>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_api_key_exists>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_exists>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_exists' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_api_key_exists>
            nextitem: <Function test_api_key_format>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_exists>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_exists>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_exists' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_exists' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_api_key.py::test_api_key_exists
            location: ('tests\\test_api_key.py', 9, 'test_api_key_exists')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_api_key_format>
          nextitem: <Function test_api_key_no_invalid_chars>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_api_key.py::test_api_key_format
            location: ('tests\\test_api_key.py', 13, 'test_api_key_format')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_api_key_format>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_format>>
          finish pytest_fixture_setup --> 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юч [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_format>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_format' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_api_key_format>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_api_key_format>
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_format>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("⚠️ API-ключ имеет некорректный формат: sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rK...mPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч')\n +    where <function match at 0x000002A5CBC1A660> = re.match") tblen=35>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_format' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_api_key_format>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("⚠️ API-ключ имеет некорректный формат: sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rK...mPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч')\n +    where <function match at 0x000002A5CBC1A660> = re.match") tblen=35>>
            report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_api_key_format>
            nextitem: <Function test_api_key_no_invalid_chars>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_format>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_format>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_format' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_api_key.py::test_api_key_format
            location: ('tests\\test_api_key.py', 13, 'test_api_key_format')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_api_key_no_invalid_chars>
          nextitem: <Function test_clear_cache_for_repo>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_api_key.py::test_api_key_no_invalid_chars
            location: ('tests\\test_api_key.py', 18, 'test_api_key_no_invalid_chars')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_api_key_no_invalid_chars>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_no_invalid_chars>>
          finish pytest_fixture_setup --> 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юч [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_no_invalid_chars>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_api_key_no_invalid_chars>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_api_key_no_invalid_chars>
            pytest_assertrepr_compare [hook]
                config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                op: is
                left: <re.Match object; span=(164, 165), match='ю'>
                right: None
            finish pytest_assertrepr_compare --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_no_invalid_chars>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("⚠️ API-ключ содержит недопустимые символы: ю\nassert <re.Match object; span=(164, 165), match='ю'> is None") tblen=35>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_api_key_no_invalid_chars>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError("⚠️ API-ключ содержит недопустимые символы: ю\nassert <re.Match object; span=(164, 165), match='ю'> is None") tblen=35>>
            report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_api_key_no_invalid_chars>
            nextitem: <Function test_clear_cache_for_repo>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='api_key' scope='function' baseid='tests/test_api_key.py'>
              request: <SubRequest 'api_key' for <Function test_api_key_no_invalid_chars>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_api_key_no_invalid_chars>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_api_key.py::test_api_key_no_invalid_chars
            location: ('tests\\test_api_key.py', 18, 'test_api_key_no_invalid_chars')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_clear_cache_for_repo>
          nextitem: <Function test_clear_project_summary_cache>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_cache.py::test_clear_cache_for_repo
            location: ('tests\\test_cache.py', 20, 'test_clear_cache_for_repo')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_clear_cache_for_repo>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_setup --> TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x000002A5CD2E9B50>, _basetemp=None, _retention_count=3, _retention_policy='all') [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_cache_for_repo>>
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: termios [assertion]
          new basetemp C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26 [config:tmpdir]
          mktemp C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_cache_for_repo0 [config:tmpdir]
          finish pytest_fixture_setup --> C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_cache_for_repo0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000002A5D0E29BA0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_setup --> C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_cache_for_repo0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_cache_for_repo>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_clear_cache_for_repo>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_clear_cache_for_repo>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_cache_for_repo>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_clear_cache_for_repo>
            nextitem: <Function test_clear_project_summary_cache>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_cache_for_repo>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_cache_for_repo' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_cache.py::test_clear_cache_for_repo
            location: ('tests\\test_cache.py', 20, 'test_clear_cache_for_repo')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_clear_project_summary_cache>
          nextitem: <Function test_query_openai>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_cache.py::test_clear_project_summary_cache
            location: ('tests\\test_cache.py', 45, 'test_clear_project_summary_cache')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_clear_project_summary_cache>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_project_summary_cache>>
          mktemp C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_project_summary_cac0 [config:tmpdir]
          finish pytest_fixture_setup --> C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_project_summary_cac0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000002A5D0E29BA0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_setup --> C:\Users\a.bondartsov\AppData\Local\Temp\pytest-of-a.bondartsov\pytest-26\test_clear_project_summary_cac0 [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_project_summary_cache>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_clear_project_summary_cache>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_clear_project_summary_cache>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_project_summary_cache>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_clear_project_summary_cache>
            nextitem: <Function test_query_openai>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fake_cache_dir' scope='function' baseid='tests/test_cache.py'>
              request: <SubRequest 'fake_cache_dir' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_clear_project_summary_cache>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_cache.py::test_clear_project_summary_cache' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_cache.py::test_clear_project_summary_cache
            location: ('tests\\test_cache.py', 45, 'test_clear_project_summary_cache')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_query_openai>
          nextitem: <Function test_format_repository_report>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_code_advisor.py::test_query_openai
            location: ('tests\\test_code_advisor.py', 7, 'test_query_openai')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_query_openai>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_prompt' scope='function' baseid='tests/test_code_advisor.py'>
              request: <SubRequest 'test_prompt' for <Function test_query_openai>>
          finish pytest_fixture_setup --> Объясни, что делает этот код: print('Hello, World!') [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_query_openai>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_code_advisor.py::test_query_openai' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_query_openai>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_query_openai>
        pytest_runtest_makereport [hook]
            item: <Function test_query_openai>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=48>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_code_advisor.py::test_query_openai' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_query_openai>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=48>>
            report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_query_openai>
            nextitem: <Function test_format_repository_report>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_prompt' scope='function' baseid='tests/test_code_advisor.py'>
              request: <SubRequest 'test_prompt' for <Function test_query_openai>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_query_openai>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_code_advisor.py::test_query_openai' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_code_advisor.py::test_query_openai
            location: ('tests\\test_code_advisor.py', 7, 'test_query_openai')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_format_repository_report>
          nextitem: <Function test_generate_report>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_formatter.py::test_format_repository_report
            location: ('tests\\test_formatter.py', 12, 'test_format_repository_report')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_format_repository_report>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_repository_data' scope='function' baseid='tests/test_formatter.py'>
              request: <SubRequest 'test_repository_data' for <Function test_format_repository_report>>
          finish pytest_fixture_setup --> [{'path': 'main.py', 'name': 'main.py', 'role': 'Код', 'lines': 100, 'comments': 10, 'tokens': 500}, {'path': 'utils/helpers.py', 'name': 'helpers.py', 'role': 'Утилиты', 'lines': 50, 'comments': 5, 'tokens': 250}, {'path': 'README.md', 'name': 'README.md', 'role': 'Документация', 'lines': 20, 'comments': 0, 'tokens': 100}] [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_repository_report>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_formatter.py::test_format_repository_report' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_format_repository_report>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_format_repository_report>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_repository_report>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_formatter.py::test_format_repository_report' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_format_repository_report>
            nextitem: <Function test_generate_report>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_repository_data' scope='function' baseid='tests/test_formatter.py'>
              request: <SubRequest 'test_repository_data' for <Function test_format_repository_report>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_repository_report>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_formatter.py::test_format_repository_report' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_formatter.py::test_format_repository_report' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_formatter.py::test_format_repository_report
            location: ('tests\\test_formatter.py', 12, 'test_format_repository_report')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_report>
          nextitem: <Function test_store_in_rag>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_generate.py::test_generate_report
            location: ('tests\\test_generate.py', 13, 'test_generate_report')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_report>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_repository_data' scope='function' baseid='tests/test_generate.py'>
              request: <SubRequest 'test_repository_data' for <Function test_generate_report>>
          finish pytest_fixture_setup --> [{'path': 'main.py', 'role': 'Код', 'lines': 100, 'comments': 10, 'tokens': 500}, {'path': 'utils/helpers.py', 'role': 'Код', 'lines': 50, 'comments': 5, 'tokens': 250}, {'path': 'README.md', 'role': 'Документация', 'lines': 20, 'comments': 0, 'tokens': 100}] [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_report>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_generate.py::test_generate_report' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_generate.py::test_generate_report' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_generate.py::test_generate_report' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_report>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_report>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_report>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_generate.py::test_generate_report' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_generate.py::test_generate_report' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_generate.py::test_generate_report' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_report>
            nextitem: <Function test_store_in_rag>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_repository_data' scope='function' baseid='tests/test_generate.py'>
              request: <SubRequest 'test_repository_data' for <Function test_generate_report>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_report>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_generate.py::test_generate_report' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_generate.py::test_generate_report' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_generate.py::test_generate_report' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_generate.py::test_generate_report
            location: ('tests\\test_generate.py', 13, 'test_generate_report')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_store_in_rag>
          nextitem: <Function test_query_rag>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_rag_integration.py::test_store_in_rag
            location: ('tests\\test_rag_integration.py', 20, 'test_store_in_rag')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_store_in_rag>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_text' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_text' for <Function test_store_in_rag>>
          finish pytest_fixture_setup --> This is a test document for RAG storage. [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_metadata' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_metadata' for <Function test_store_in_rag>>
          finish pytest_fixture_setup --> [hook]
              repository_name: TestRepo
              folder_name: TestFolder
              file_name: test_file.py
              analysis: This is a sample analysis
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_store_in_rag>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_store_in_rag>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_store_in_rag>
            pytest_assertrepr_compare [hook]
                config: <_pytest.config.Config object at 0x000002A5CD296BA0>
                op: is
                left: None
                right: True
            finish pytest_assertrepr_compare --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_store_in_rag>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert None is True') tblen=35>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_store_in_rag>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert None is True') tblen=35>>
            report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_store_in_rag>
            nextitem: <Function test_query_rag>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_metadata' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_metadata' for <Function test_store_in_rag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_text' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_text' for <Function test_store_in_rag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_store_in_rag>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_rag_integration.py::test_store_in_rag
            location: ('tests\\test_rag_integration.py', 20, 'test_store_in_rag')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_query_rag>
          nextitem: <Function test_generate_ai_report>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_rag_integration.py::test_query_rag
            location: ('tests\\test_rag_integration.py', 30, 'test_query_rag')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_query_rag>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_query' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_query' for <Function test_query_rag>>
          finish pytest_fixture_setup --> What is the test document about? [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='sample_metadata' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_metadata' for <Function test_query_rag>>
          finish pytest_fixture_setup --> [hook]
              repository_name: TestRepo
              folder_name: TestFolder
              file_name: test_file.py
              analysis: This is a sample analysis
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_query_rag>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_query_rag' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_query_rag>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_query_rag>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_query_rag>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_query_rag' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_query_rag>
            nextitem: <Function test_generate_ai_report>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_metadata' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_metadata' for <Function test_query_rag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='sample_query' scope='function' baseid='tests/test_rag_integration.py'>
              request: <SubRequest 'sample_query' for <Function test_query_rag>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_query_rag>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_rag_integration.py::test_query_rag' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_rag_integration.py::test_query_rag' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_rag_integration.py::test_query_rag
            location: ('tests\\test_rag_integration.py', 30, 'test_query_rag')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_ai_report>
          nextitem: <Function test_analyze_structure>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_report_generator.py::test_generate_ai_report
            location: ('tests\\test_report_generator.py', 13, 'test_generate_ai_report')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_ai_report>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_analysis' scope='function' baseid='tests/test_report_generator.py'>
              request: <SubRequest 'mock_analysis' for <Function test_generate_ai_report>>
          finish pytest_fixture_setup --> [hook]
              project: TestProject
              repository: TestRepo
              folder: TestFolder
              file: test_file.py
              content: print('Hello, World!')
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_ai_report>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_ai_report>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_ai_report>
          early skip of rewriting module: tiktoken_ext.openai_public [assertion]
          early skip of rewriting module: tiktoken.load [assertion]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_ai_report>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=49>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_generate_ai_report>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=49>>
            report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_ai_report>
            nextitem: <Function test_analyze_structure>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_analysis' scope='function' baseid='tests/test_report_generator.py'>
              request: <SubRequest 'mock_analysis' for <Function test_generate_ai_report>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_ai_report>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_report_generator.py::test_generate_ai_report
            location: ('tests\\test_report_generator.py', 13, 'test_generate_ai_report')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_analyze_structure>
          nextitem: <Function test_generate_summary>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_structure_analysis.py::test_analyze_structure
            location: ('tests\\test_structure_analysis.py', 11, 'test_analyze_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_analyze_structure>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_python_code' scope='function' baseid='tests/test_structure_analysis.py'>
              request: <SubRequest 'test_python_code' for <Function test_analyze_structure>>
          finish pytest_fixture_setup --> 
    class Example:
        def method(self):
            pass
     [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_structure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_analyze_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_analyze_structure>
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_structure>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=49>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_analyze_structure>
            call: <CallInfo when='call' excinfo=<ExceptionInfo UnicodeEncodeError('latin-1', 'Bearer sk-proj-Qj3abMMhCe7FMjDJbT2K21qEl9oTG9ML2yLAt2lH8hZPRiCZ5hdB2rKaYzQylLkdvIzTNQW6...FJh-4nPnpDMIXolhtyKIA2S4xKmPuWhrdRC5qqfLDYXQpQVT5Cd2Mfj8pXUnHu32R145TlztL5oAюч', 171, 173, 'ordinal not in range(256)') tblen=49>>
            report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_analyze_structure>
            nextitem: <Function test_generate_summary>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_python_code' scope='function' baseid='tests/test_structure_analysis.py'>
              request: <SubRequest 'test_python_code' for <Function test_analyze_structure>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_structure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_structure_analysis.py::test_analyze_structure
            location: ('tests\\test_structure_analysis.py', 11, 'test_analyze_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_summary>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/test_summary.py::test_generate_summary
            location: ('tests\\test_summary.py', 25, 'test_generate_summary')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_summary>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='test_repositories' scope='function' baseid='tests/test_summary.py'>
              request: <SubRequest 'test_repositories' for <Function test_generate_summary>>
          finish pytest_fixture_setup --> [{'repository': 'Repo1', 'tokens': 600, 'files': [{'path': 'main.py', 'role': 'Код', 'lines': 100, 'comments': 10, 'tokens': 500}, {'path': 'utils/helpers.py', 'role': 'Код', 'lines': 20, 'comments': 5, 'tokens': 100}]}, {'repository': 'Repo2', 'tokens': 1500, 'files': [{'path': 'server/main.py', 'role': 'Код', 'lines': 300, 'comments': 30, 'tokens': 1500}]}] [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_summary>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_summary.py::test_generate_summary' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_summary.py::test_generate_summary' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_summary.py::test_generate_summary' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_summary>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_summary>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_summary>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_summary.py::test_generate_summary' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_summary.py::test_generate_summary' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_summary.py::test_generate_summary' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_summary>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='test_repositories' scope='function' baseid='tests/test_summary.py'>
              request: <SubRequest 'test_repositories' for <Function test_generate_summary>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_project_summary_cache>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_clear_cache_for_repo>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_summary>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_summary.py::test_generate_summary' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_summary.py::test_generate_summary' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_summary.py::test_generate_summary' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000002A5CD296BA0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_summary.py::test_generate_summary
            location: ('tests\\test_summary.py', 25, 'test_generate_summary')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=6 testscollected=13>
        exitstatus: 1
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000002A5CD4D3380>
          exitstatus: 1
          config: <_pytest.config.Config object at 0x000002A5CD296BA0>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: pygments.console [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_format' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_api_key.py::test_api_key_no_invalid_chars' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_code_advisor.py::test_query_openai' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_rag_integration.py::test_store_in_rag' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_report_generator.py::test_generate_ai_report' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_structure_analysis.py::test_analyze_structure' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x000002A5CD296BA0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000002A5CD296BA0>
    finish pytest_unconfigure --> [] [hook]
