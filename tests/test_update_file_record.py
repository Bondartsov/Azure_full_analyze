# tests/test_update_file_record.py

import sys
import os
import hashlib
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
from datetime import datetime
import pytest
from sqlite3 import Error  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Error

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from core.utils.database import (
    add_file_record,
    update_file_record,
    delete_file_record,
    create_connection,
    DB_PATH
)
from core.logging.logger import log, setup_logging

@pytest.fixture(scope="function")
def setup_test_record():
    """
    Fixture to set up a test file record in the database.
    It adds a unique test record and ensures it's cleaned up after the test.
    """
    setup_logging()
    
    project_name = "TestProject"
    repository_name = "TestRepo"
    folder_name = "src"
    file_name = "test_file.py"
    unique_id = uuid.uuid4().hex  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    file_path = f"src/test_file_{unique_id}.py"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π file_path
    content = "def test():\n    pass\n# This is a comment"
    lines = content.count('\n') + 1
    comments = 1
    tokens = 10  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    hash_value = hashlib.sha256(content.encode('utf-8')).hexdigest()

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    delete_success = delete_file_record(file_path, hash_value)
    if delete_success:
        log(f"üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {file_path} —É–¥–∞–ª–µ–Ω–∞.")
        print(f"üóëÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {file_path} —É–¥–∞–ª–µ–Ω–∞.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    success = add_file_record(
        project_name=project_name,
        repository_name=repository_name,
        folder_name=folder_name,
        file_name=file_name,
        file_path=file_path,
        content=content,
        lines=lines,
        comments=comments,
        tokens=tokens,
        hash_value=hash_value,
        processed=False
    )
    assert success, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å."

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏
    conn = create_connection(DB_PATH)
    assert conn is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏."

    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id FROM analysis_results
            WHERE file_path = ? AND hash = ?
        """, (file_path, hash_value))
        result = cursor.fetchone()
    finally:
        conn.close()

    assert result is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    file_id = result[0]
    assert isinstance(file_id, int), "‚ùå ID –∑–∞–ø–∏—Å–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
        
    yield file_id, file_path  # Provide the fixture value to the test

    # Teardown: —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    teardown_success = delete_file_record(file_path, hash_value)
    if teardown_success:
        log(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {file_path} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞.")
        print(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è {file_path} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞.")

def test_update_file_record(setup_test_record):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    file_id, file_path = setup_test_record
    assert file_id is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    analysis = "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò."
    success = update_file_record(file_id, analysis)
    assert success, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å."

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    conn = create_connection(DB_PATH)
    assert conn is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."

    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT processed, analysis, date_updated FROM analysis_results
            WHERE id = ?
        """, (file_id,))
        record = cursor.fetchone()
    finally:
        conn.close()

    assert record is not None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    processed, analysis_result, date_updated = record

    assert processed == 1, "‚ùå –ü–æ–ª–µ `processed` –Ω–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ `1`."
    assert analysis_result == "–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ò–ò.", "‚ùå –ü–æ–ª–µ `analysis` –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    assert date_updated is not None, "‚ùå –ü–æ–ª–µ `date_updated` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."

    log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
