# tests/manual_test_report_generator.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.logging.logger import setup_logging, log
from core.ai.report_generator import generate_ai_report

def manual_test_generate_ai_report():
    setup_logging()
    log("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.")
    
    project_name = "ManualTestProject"
    repository_name = "TestRepo"
    folder_name = "TestFolder"
    file_name = "manual_test_file.py"
    file_content = "def hello():\n    print('Hello, Manual Testing!')"
    
    report_path = generate_ai_report(
        project_name,
        repository_name,
        folder_name,
        file_name,
        file_content
    )
    
    assert report_path is not None, "–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω."
    assert os.path.exists(report_path), f"–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {report_path}"
    
    with open(report_path, "r", encoding="utf-8") as f:
        content = f.read()
        assert "üìå **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**" in content, "–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç—á—ë—Ç–µ."
        assert "Hello, Manual Testing!" in content, "–ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    log(f"‚úÖ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ. –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
    print(f"‚úÖ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ. –û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")

if __name__ == "__main__":
    manual_test_generate_ai_report()