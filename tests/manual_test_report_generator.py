# tests/manual_test_query.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.logging.logger import setup_logging  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

from core.ai.report_generator import generate_ai_report
from core.logging.logger import log  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ log –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

def manual_test_query():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ mock_analysis
    mock_analysis = {
        "project": "TestProject",
        "repository": "ST.CPM",
        "folder": "TestFolder",
        "file": "test_file.py",
        "content": "print('Hello, World!')"
    }

    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

    def greet(name):
        # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        print(f"Hello, {name}!")

    1. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞.
    2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥.
    3. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è.
    4. –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω —ç—Ç–æ—Ç –∫–æ–¥ (1-10)?
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    OPENAI_MODEL = os.getenv("OPENAI_MODEL", "cl100k_base")
    log(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {OPENAI_MODEL}")
    print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {OPENAI_MODEL}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞
    report_path = generate_ai_report(
        mock_analysis["project"],
        mock_analysis["repository"],
        mock_analysis["folder"],
        mock_analysis["file"],
        mock_analysis["content"]
    )
    print("–ê–Ω–∞–ª–∏–∑ –æ—Ç OpenAI:")
    print(report_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
    assert report_path is not None, "–û—Ç—á—ë—Ç –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω."
    assert os.path.exists(report_path), f"–û—Ç—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {report_path}"
    
    with open(report_path, "r", encoding="utf-8") as f:
        content = f.read()
        assert "üìå **–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:**" in content, "–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç—á—ë—Ç–µ."
        assert "Hello, World!" in content, "–ê–Ω–∞–ª–∏–∑ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    log("‚úÖ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI.")
    log(f"‚úÖ –ú–æ–¥–µ–ª—å {OPENAI_MODEL} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞.")
    print(f"‚úÖ –ú–æ–¥–µ–ª—å {OPENAI_MODEL} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞.")

if __name__ == "__main__":
    manual_test_query()