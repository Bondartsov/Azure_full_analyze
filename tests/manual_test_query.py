# tests/manual_test_query.py

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.ai.code_advisor import query_openai
from core.logging.logger import log

def manual_test_query():
    prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:

    def greet(name):
        # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        print(f"Hello, {name}!")

    1. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞.
    2. –û–±—ä—è—Å–Ω–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥.
    3. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è.
    4. –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–µ–Ω —ç—Ç–æ—Ç –∫–æ–¥ (1-10)?
    """

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    OPENAI_MODEL = os.getenv("OPENAI_MODEL")
    log(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {OPENAI_MODEL}")
    print(f"üîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {OPENAI_MODEL}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI
    analysis = query_openai(prompt)
    print("–ê–Ω–∞–ª–∏–∑ –æ—Ç OpenAI:")
    print(analysis)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    assert isinstance(analysis, str), "–ê–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    assert len(analysis) > 0, "–ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if analysis:
        log("‚úÖ –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç OpenAI.")
        log(f"‚úÖ –ú–æ–¥–µ–ª—å {OPENAI_MODEL} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞.")
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {OPENAI_MODEL} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∞.")
    else:
        log("‚ö†Ô∏è –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI.", level="WARNING")
        print("‚ö†Ô∏è –†—É—á–Ω–æ–π —Ç–µ—Å—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI.")

if __name__ == "__main__":
    manual_test_query()